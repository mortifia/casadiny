/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/store/auth": {
    /**
     * Get Current Customer 
     * @description Gets the currently logged in Customer.
     */
    get: operations["GetAuth"];
    /**
     * Customer Login 
     * @description Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser.
     */
    post: operations["PostAuth"];
    /**
     * Customer Log out 
     * @description Destroys a Customer's authenticated session.
     */
    delete: operations["DeleteAuth"];
  };
  "/store/auth/{email}": {
    /**
     * Check if email exists 
     * @description Checks if a Customer with the given email has signed up.
     */
    get: operations["GetAuthEmail"];
  };
  "/store/carts": {
    /**
     * Create a Cart 
     * @description Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set.
     */
    post: operations["PostCart"];
  };
  "/store/carts/{id}": {
    /**
     * Get a Cart 
     * @description Retrieves a Cart.
     */
    get: operations["GetCartsCart"];
    /**
     * Update a Cart 
     * @description Updates a Cart.
     */
    post: operations["PostCartsCart"];
  };
  "/store/carts/{id}/complete": {
    /**
     * Complete a Cart 
     * @description Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request.
     */
    post: operations["PostCartsCartComplete"];
  };
  "/store/carts/{id}/discounts/{code}": {
    /**
     * Remove Discount 
     * @description Removes a Discount from a Cart.
     */
    delete: operations["DeleteCartsCartDiscountsDiscount"];
  };
  "/store/carts/{id}/line-items": {
    /**
     * Add a Line Item 
     * @description Generates a Line Item with a given Product Variant and adds it to the Cart
     */
    post: operations["PostCartsCartLineItems"];
  };
  "/store/carts/{id}/line-items/{line_id}": {
    /**
     * Update a Line Item 
     * @description Updates a Line Item if the desired quantity can be fulfilled.
     */
    post: operations["PostCartsCartLineItemsItem"];
    /**
     * Delete a Line Item 
     * @description Removes a Line Item from a Cart.
     */
    delete: operations["DeleteCartsCartLineItemsItem"];
  };
  "/store/carts/{id}/payment-session": {
    /**
     * Select a Payment Session 
     * @description Selects a Payment Session as the session intended to be used towards the completion of the Cart.
     */
    post: operations["PostCartsCartPaymentSession"];
  };
  "/store/carts/{id}/payment-sessions": {
    /**
     * Create Payment Sessions 
     * @description Creates Payment Sessions for each of the available Payment Providers in the Cart's Region.
     */
    post: operations["PostCartsCartPaymentSessions"];
  };
  "/store/carts/{id}/payment-sessions/{provider_id}": {
    /**
     * Update a Payment Session 
     * @description Updates a Payment Session with additional data.
     */
    post: operations["PostCartsCartPaymentSessionUpdate"];
    /**
     * Delete a Payment Session 
     * @description Deletes a Payment Session on a Cart. May be useful if a payment has failed.
     */
    delete: operations["DeleteCartsCartPaymentSessionsSession"];
  };
  "/store/carts/{id}/payment-sessions/{provider_id}/refresh": {
    /**
     * Refresh a Payment Session 
     * @description Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary.
     */
    post: operations["PostCartsCartPaymentSessionsSession"];
  };
  "/store/carts/{id}/shipping-methods": {
    /**
     * Add a Shipping Method 
     * @description Adds a Shipping Method to the Cart.
     */
    post: operations["PostCartsCartShippingMethod"];
  };
  "/store/carts/{id}/taxes": {
    /**
     * Calculate Cart Taxes 
     * @description Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service.
     */
    post: operations["PostCartsCartTaxes"];
  };
  "/store/collections": {
    /**
     * List Collections 
     * @description Retrieve a list of Product Collection.
     */
    get: operations["GetCollections"];
  };
  "/store/collections/{id}": {
    /**
     * Get a Collection 
     * @description Retrieves a Product Collection.
     */
    get: operations["GetCollectionsCollection"];
  };
  "/store/customers": {
    /**
     * Create a Customer 
     * @description Creates a Customer account.
     */
    post: operations["PostCustomers"];
  };
  "/store/customers/me": {
    /**
     * Get a Customer 
     * @description Retrieves a Customer - the Customer must be logged in to retrieve their details.
     */
    get: operations["GetCustomersCustomer"];
    /**
     * Update Customer 
     * @description Updates a Customer's saved details.
     */
    post: operations["PostCustomersCustomer"];
  };
  "/store/customers/me/addresses": {
    /**
     * Add a Shipping Address 
     * @description Adds a Shipping Address to a Customer's saved addresses.
     */
    post: operations["PostCustomersCustomerAddresses"];
  };
  "/store/customers/me/addresses/{address_id}": {
    /**
     * Update a Shipping Address 
     * @description Updates a Customer's saved Shipping Address.
     */
    post: operations["PostCustomersCustomerAddressesAddress"];
    /**
     * Delete an Address 
     * @description Removes an Address from the Customer's saved addresses.
     */
    delete: operations["DeleteCustomersCustomerAddressesAddress"];
  };
  "/store/customers/me/orders": {
    /**
     * List Orders 
     * @description Retrieves a list of a Customer's Orders.
     */
    get: operations["GetCustomersCustomerOrders"];
  };
  "/store/customers/me/payment-methods": {
    /**
     * Get Payment Methods 
     * @description Retrieves a list of a Customer's saved payment methods. Payment methods are saved with Payment Providers and it is their responsibility to fetch saved methods.
     */
    get: operations["GetCustomersCustomerPaymentMethods"];
  };
  "/store/customers/password-reset": {
    /**
     * Reset Password 
     * @description Resets a Customer's password using a password token created by a previous /password-token request.
     */
    post: operations["PostCustomersResetPassword"];
  };
  "/store/customers/password-token": {
    /**
     * Request Password Reset 
     * @description Creates a reset password token to be used in a subsequent /reset-password request. The password token should be sent out of band e.g. via email and will not be returned.
     */
    post: operations["PostCustomersCustomerPasswordToken"];
  };
  "/store/gift-cards/{code}": {
    /**
     * Get Gift Card by Code 
     * @description Retrieves a Gift Card by its associated unique code.
     */
    get: operations["GetGiftCardsCode"];
  };
  "/store/order-edits/{id}": {
    /**
     * Retrieve an OrderEdit 
     * @description Retrieves a OrderEdit.
     */
    get: operations["GetOrderEditsOrderEdit"];
  };
  "/store/order-edits/{id}/complete": {
    /**
     * Completes an OrderEdit 
     * @description Completes an OrderEdit.
     */
    post: operations["PostOrderEditsOrderEditComplete"];
  };
  "/store/order-edits/{id}/decline": {
    /**
     * Decline an OrderEdit 
     * @description Declines an OrderEdit.
     */
    post: operations["PostOrderEditsOrderEditDecline"];
  };
  "/store/orders": {
    /**
     * Look Up an Order 
     * @description Look up an order using filters.
     */
    get: operations["GetOrders"];
  };
  "/store/orders/batch/customer/token": {
    /**
     * Claim an Order 
     * @description Sends an email to emails registered to orders provided with link to transfer order ownership
     */
    post: operations["PostOrdersCustomerOrderClaim"];
  };
  "/store/orders/cart/{cart_id}": {
    /**
     * Get by Cart ID 
     * @description Retrieves an Order by the id of the Cart that was used to create the Order.
     */
    get: operations["GetOrdersOrderCartId"];
  };
  "/store/orders/customer/confirm": {
    /**
     * Verify an Order Claim 
     * @description Verifies the claim order token provided to the customer upon request of order ownership
     */
    post: operations["PostOrdersCustomerOrderClaimsCustomerOrderClaimAccept"];
  };
  "/store/orders/{id}": {
    /**
     * Get an Order 
     * @description Retrieves an Order
     */
    get: operations["GetOrdersOrder"];
  };
  "/store/payment-collections/{id}": {
    /**
     * Get a PaymentCollection 
     * @description Get a Payment Collection
     */
    get: operations["GetPaymentCollectionsPaymentCollection"];
  };
  "/store/payment-collections/{id}/sessions": {
    /**
     * Manage a Payment Session 
     * @description Manages Payment Sessions from Payment Collections.
     */
    post: operations["PostPaymentCollectionsSessions"];
  };
  "/store/payment-collections/{id}/sessions/batch": {
    /**
     * Manage Payment Sessions 
     * @description Manages Multiple Payment Sessions from Payment Collections.
     */
    post: operations["PostPaymentCollectionsPaymentCollectionSessionsBatch"];
  };
  "/store/payment-collections/{id}/sessions/batch/authorize": {
    /**
     * Authorize PaymentSessions 
     * @description Authorizes Payment Sessions of a Payment Collection.
     */
    post: operations["PostPaymentCollectionsSessionsBatchAuthorize"];
  };
  "/store/payment-collections/{id}/sessions/{session_id}": {
    /**
     * Refresh a Payment Session 
     * @description Refreshes a Payment Session to ensure that it is in sync with the Payment Collection.
     */
    post: operations["PostPaymentCollectionsPaymentCollectionPaymentSessionsSession"];
  };
  "/store/payment-collections/{id}/sessions/{session_id}/authorize": {
    /**
     * Authorize Payment Session 
     * @description Authorizes a Payment Session of a Payment Collection.
     */
    post: operations["PostPaymentCollectionsSessionsSessionAuthorize"];
  };
  "/store/product-categories": {
    /**
     * List Product Categories 
     * @description Retrieve a list of product categories.
     */
    get: operations["GetProductCategories"];
  };
  "/store/product-categories/{id}": {
    /**
     * Get a Product Category 
     * @description Retrieves a Product Category.
     */
    get: operations["GetProductCategoriesCategory"];
  };
  "/store/product-tags": {
    /**
     * List Product Tags 
     * @description Retrieve a list of Product Tags.
     */
    get: operations["GetProductTags"];
  };
  "/store/product-types": {
    /**
     * List Product Types 
     * @description Retrieve a list of Product Types.
     */
    get: operations["GetProductTypes"];
  };
  "/store/products": {
    /**
     * List Products 
     * @description Retrieves a list of Products.
     */
    get: operations["GetProducts"];
  };
  "/store/products/search": {
    /**
     * Search Products 
     * @description Run a search query on products using the search engine installed on Medusa
     */
    post: operations["PostProductsSearch"];
  };
  "/store/products/{id}": {
    /**
     * Get a Product 
     * @description Retrieves a Product.
     */
    get: operations["GetProductsProduct"];
  };
  "/store/regions": {
    /**
     * List Regions 
     * @description Retrieves a list of Regions.
     */
    get: operations["GetRegions"];
  };
  "/store/regions/{id}": {
    /**
     * Get a Region 
     * @description Retrieves a Region.
     */
    get: operations["GetRegionsRegion"];
  };
  "/store/return-reasons": {
    /**
     * List Return Reasons 
     * @description Retrieves a list of Return Reasons.
     */
    get: operations["GetReturnReasons"];
  };
  "/store/return-reasons/{id}": {
    /**
     * Get a Return Reason 
     * @description Retrieves a Return Reason.
     */
    get: operations["GetReturnReasonsReason"];
  };
  "/store/returns": {
    /**
     * Create Return 
     * @description Creates a Return for an Order.
     */
    post: operations["PostReturns"];
  };
  "/store/shipping-options": {
    /**
     * Get Shipping Options 
     * @description Retrieves a list of Shipping Options.
     */
    get: operations["GetShippingOptions"];
  };
  "/store/shipping-options/{cart_id}": {
    /**
     * List for Cart 
     * @description Retrieves a list of Shipping Options available to a cart.
     */
    get: operations["GetShippingOptionsCartId"];
  };
  "/store/swaps": {
    /**
     * Create a Swap 
     * @description Creates a Swap on an Order by providing some items to return along with some items to send back
     */
    post: operations["PostSwaps"];
  };
  "/store/swaps/{cart_id}": {
    /**
     * Get by Cart ID 
     * @description Retrieves a Swap by the id of the Cart used to confirm the Swap.
     */
    get: operations["GetSwapsSwapCartId"];
  };
  "/store/variants": {
    /**
     * Get Product Variants 
     * @description Retrieves a list of Product Variants
     */
    get: operations["GetVariants"];
  };
  "/store/variants/{variant_id}": {
    /**
     * Get a Product Variant 
     * @description Retrieves a Product Variant by id
     */
    get: operations["GetVariantsVariant"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Address 
     * @description An address.
     */
    Address: {
      /**
       * @description ID of the address 
       * @example addr_01G8ZC9VS1XVE149MGH2J7QSSH
       */
      id: string;
      /**
       * @description ID of the customer this address belongs to 
       * @example cus_01G2SG30J8C85S4A5CHM2S1NS2
       */
      customer_id: string | null;
      /** @description Available if the relation `customer` is expanded. */
      customer?: components["schemas"]["Customer"];
      /**
       * @description Company name 
       * @example Acme
       */
      company: string | null;
      /**
       * @description First name 
       * @example Arno
       */
      first_name: string | null;
      /**
       * @description Last name 
       * @example Willms
       */
      last_name: string | null;
      /**
       * @description Address line 1 
       * @example 14433 Kemmer Court
       */
      address_1: string | null;
      /**
       * @description Address line 2 
       * @example Suite 369
       */
      address_2: string | null;
      /**
       * @description City 
       * @example South Geoffreyview
       */
      city: string | null;
      /**
       * @description The 2 character ISO code of the country in lower case 
       * @example st
       */
      country_code: string | null;
      /** @description A country object. Available if the relation `country` is expanded. */
      country?: components["schemas"]["Country"];
      /**
       * @description Province 
       * @example Kentucky
       */
      province: string | null;
      /**
       * @description Postal Code 
       * @example 72093
       */
      postal_code: string | null;
      /**
       * @description Phone Number 
       * @example 16128234334802
       */
      phone: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /** @description Address fields used when creating an address. */
    AddressCreatePayload: {
      /**
       * @description First name 
       * @example Arno
       */
      first_name: string;
      /**
       * @description Last name 
       * @example Willms
       */
      last_name: string;
      /**
       * @description Phone Number 
       * @example 16128234334802
       */
      phone?: string;
      company?: string;
      /**
       * @description Address line 1 
       * @example 14433 Kemmer Court
       */
      address_1: string;
      /**
       * @description Address line 2 
       * @example Suite 369
       */
      address_2?: string;
      /**
       * @description City 
       * @example South Geoffreyview
       */
      city: string;
      /**
       * @description The 2 character ISO code of the country in lower case 
       * @example st
       */
      country_code: string;
      /**
       * @description Province 
       * @example Kentucky
       */
      province?: string;
      /**
       * @description Postal Code 
       * @example 72093
       */
      postal_code: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /** @description Address fields used when creating/updating an address. */
    AddressPayload: {
      /**
       * @description First name 
       * @example Arno
       */
      first_name?: string;
      /**
       * @description Last name 
       * @example Willms
       */
      last_name?: string;
      /**
       * @description Phone Number 
       * @example 16128234334802
       */
      phone?: string;
      company?: string;
      /**
       * @description Address line 1 
       * @example 14433 Kemmer Court
       */
      address_1?: string;
      /**
       * @description Address line 2 
       * @example Suite 369
       */
      address_2?: string;
      /**
       * @description City 
       * @example South Geoffreyview
       */
      city?: string;
      /**
       * @description The 2 character ISO code of the country in lower case 
       * @example st
       */
      country_code?: string;
      /**
       * @description Province 
       * @example Kentucky
       */
      province?: string;
      /**
       * @description Postal Code 
       * @example 72093
       */
      postal_code?: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /**
     * Batch Job 
     * @description A Batch Job.
     */
    BatchJob: {
      /**
       * @description The unique identifier for the batch job. 
       * @example batch_01G8T782965PYFG0751G0Z38B4
       */
      id: string;
      /**
       * @description The type of batch job. 
       * @enum {string}
       */
      type: "product-import" | "product-export";
      /**
       * @description The status of the batch job. 
       * @default created 
       * @enum {string}
       */
      status: "created" | "pre_processed" | "confirmed" | "processing" | "completed" | "canceled" | "failed";
      /**
       * @description The unique identifier of the user that created the batch job. 
       * @example usr_01G1G5V26F5TB3GPAPNJ8X1S3V
       */
      created_by: string | null;
      /** @description A user object. Available if the relation `created_by_user` is expanded. */
      created_by_user?: components["schemas"]["User"];
      /**
       * @description The context of the batch job, the type of the batch job determines what the context should contain. 
       * @example {
       *   "shape": {
       *     "prices": [
       *       {
       *         "region": null,
       *         "currency_code": "eur"
       *       }
       *     ],
       *     "dynamicImageColumnCount": 4,
       *     "dynamicOptionColumnCount": 2
       *   },
       *   "list_config": {
       *     "skip": 0,
       *     "take": 50,
       *     "order": {
       *       "created_at": "DESC"
       *     },
       *     "relations": [
       *       "variants",
       *       "variant.prices",
       *       "images"
       *     ]
       *   }
       * }
       */
      context: Record<string, unknown> | null;
      /**
       * @description Specify if the job must apply the modifications or not. 
       * @default false
       */
      dry_run: boolean;
      /**
       * @description The result of the batch job. 
       * @example {
       *   "errors": [
       *     {
       *       "err": [],
       *       "code": "unknown",
       *       "message": "Method not implemented."
       *     }
       *   ],
       *   "stat_descriptors": [
       *     {
       *       "key": "product-export-count",
       *       "name": "Product count to export",
       *       "message": "There will be 8 products exported by this action"
       *     }
       *   ]
       * }
       */
      result: (Record<string, never> & ({
        count?: number;
        advancement_count?: number;
        progress?: number;
        errors?: {
          message?: string;
          code?: string | number;
          err?: (unknown)[];
        };
        stat_descriptors?: {
          key?: string;
          name?: string;
          message?: string;
        };
        file_key?: string;
        file_size?: number;
      })) | null;
      /**
       * Format: date-time 
       * @description The date from which the job has been pre-processed.
       */
      pre_processed_at: string | null;
      /**
       * Format: date-time 
       * @description The date the job is processing at.
       */
      processing_at: string | null;
      /**
       * Format: date-time 
       * @description The date when the confirmation has been done.
       */
      confirmed_at: string | null;
      /**
       * Format: date-time 
       * @description The date of the completion.
       */
      completed_at: string | null;
      /**
       * Format: date-time 
       * @description The date of the concellation.
       */
      canceled_at: string | null;
      /**
       * Format: date-time 
       * @description The date when the job failed.
       */
      failed_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Cart 
     * @description Represents a user cart
     */
    Cart: {
      /**
       * @description The cart's ID 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /**
       * Format: email 
       * @description The email associated with the cart
       */
      email: string | null;
      /**
       * @description The billing address's ID 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      billing_address_id: string | null;
      /** @description Available if the relation `billing_address` is expanded. */
      billing_address?: components["schemas"]["Address"];
      /**
       * @description The shipping address's ID 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      shipping_address_id: string | null;
      /** @description Available if the relation `shipping_address` is expanded. */
      shipping_address?: components["schemas"]["Address"];
      /** @description Available if the relation `items` is expanded. */
      items?: (components["schemas"]["LineItem"])[];
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /** @description Available if the relation `discounts` is expanded. */
      discounts?: (components["schemas"]["Discount"])[];
      /** @description Available if the relation `gift_cards` is expanded. */
      gift_cards?: (components["schemas"]["GiftCard"])[];
      /**
       * @description The customer's ID 
       * @example cus_01G2SG30J8C85S4A5CHM2S1NS2
       */
      customer_id: string | null;
      /** @description A customer object. Available if the relation `customer` is expanded. */
      customer?: components["schemas"]["Customer"];
      /** @description The selected payment session in the cart. */
      payment_session: components["schemas"]["PaymentSession"];
      /** @description The payment sessions created on the cart. */
      payment_sessions?: (components["schemas"]["PaymentSession"])[];
      /**
       * @description The payment's ID if available 
       * @example pay_01G8ZCC5W42ZNY842124G7P5R9
       */
      payment_id: string | null;
      /** @description Available if the relation `payment` is expanded. */
      payment?: components["schemas"]["Payment"];
      /** @description The shipping methods added to the cart. */
      shipping_methods?: (components["schemas"]["ShippingMethod"])[];
      /**
       * @description The cart's type. 
       * @default default 
       * @enum {string}
       */
      type: "default" | "swap" | "draft_order" | "payment_link" | "claim";
      /**
       * Format: date-time 
       * @description The date with timezone at which the cart was completed.
       */
      completed_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the payment was authorized.
       */
      payment_authorized_at: string | null;
      /** @description Randomly generated key used to continue the completion of a cart in case of failure. */
      idempotency_key: string | null;
      /**
       * @description The context of the cart which can include info like IP or user agent. 
       * @example {
       *   "ip": "::1",
       *   "user_agent": "PostmanRuntime/7.29.2"
       * }
       */
      context: Record<string, unknown> | null;
      /**
       * @description The sales channel ID the cart is associated with. 
       * @example null
       */
      sales_channel_id?: string | null;
      /** @description A sales channel object. Available if the relation `sales_channel` is expanded. */
      sales_channel?: components["schemas"]["SalesChannel"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
      /**
       * @description The total of shipping 
       * @example 1000
       */
      shipping_total?: number;
      /**
       * @description The total of discount rounded 
       * @example 800
       */
      discount_total?: number;
      /**
       * @description The total of discount 
       * @example 800
       */
      raw_discount_total?: number;
      /**
       * @description The total of items with taxes 
       * @example 8000
       */
      item_tax_total?: number;
      /**
       * @description The total of shipping with taxes 
       * @example 1000
       */
      shipping_tax_total?: number;
      /**
       * @description The total of tax 
       * @example 0
       */
      tax_total?: number;
      /**
       * @description The total amount refunded if the order associated with this cart is returned. 
       * @example 0
       */
      refunded_total?: number;
      /**
       * @description The total amount of the cart 
       * @example 8200
       */
      total?: number;
      /**
       * @description The subtotal of the cart 
       * @example 8000
       */
      subtotal?: number;
      /**
       * @description The amount that can be refunded 
       * @example 8200
       */
      refundable_amount?: number;
      /**
       * @description The total of gift cards 
       * @example 0
       */
      gift_card_total?: number;
      /**
       * @description The total of gift cards with taxes 
       * @example 0
       */
      gift_card_tax_total?: number;
    };
    /**
     * Claim Image 
     * @description Represents photo documentation of a claim.
     */
    ClaimImage: {
      /**
       * @description The claim image's ID 
       * @example cimg_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /** @description The ID of the claim item associated with the image */
      claim_item_id: string;
      /** @description A claim item object. Available if the relation `claim_item` is expanded. */
      claim_item?: components["schemas"]["ClaimItem"];
      /**
       * Format: uri 
       * @description The URL of the image
       */
      url: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Claim Item 
     * @description Represents a claimed item along with information about the reasons for the claim.
     */
    ClaimItem: {
      /**
       * @description The claim item's ID 
       * @example citm_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /** @description Available if the relation `images` is expanded. */
      images?: (components["schemas"]["ClaimImage"])[];
      /** @description The ID of the claim this item is associated with. */
      claim_order_id: string;
      /** @description A claim order object. Available if the relation `claim_order` is expanded. */
      claim_order?: components["schemas"]["ClaimOrder"];
      /**
       * @description The ID of the line item that the claim item refers to. 
       * @example item_01G8ZM25TN49YV9EQBE2NC27KC
       */
      item_id: string;
      /** @description Available if the relation `item` is expanded. */
      item?: components["schemas"]["LineItem"];
      /**
       * @description The ID of the product variant that is claimed. 
       * @example variant_01G1G5V2MRX2V3PVSR2WXYPFB6
       */
      variant_id: string;
      /** @description A variant object. Available if the relation `variant` is expanded. */
      variant?: components["schemas"]["ProductVariant"];
      /**
       * @description The reason for the claim 
       * @enum {string}
       */
      reason: "missing_item" | "wrong_item" | "production_failure" | "other";
      /**
       * @description An optional note about the claim, for additional information 
       * @example I don't like it.
       */
      note: string | null;
      /**
       * @description The quantity of the item that is being claimed; must be less than or equal to the amount purchased in the original order. 
       * @example 1
       */
      quantity: number;
      /** @description User defined tags for easy filtering and grouping. Available if the relation 'tags' is expanded. */
      tags?: (components["schemas"]["ClaimTag"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Claim Order 
     * @description Claim Orders represent a group of faulty or missing items. Each claim order consists of a subset of items associated with an original order, and can contain additional information about fulfillments and returns.
     */
    ClaimOrder: {
      /**
       * @description The claim's ID 
       * @example claim_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /**
       * @description The claim's type 
       * @enum {string}
       */
      type: "refund" | "replace";
      /**
       * @description The status of the claim's payment 
       * @default na 
       * @enum {string}
       */
      payment_status: "na" | "not_refunded" | "refunded";
      /**
       * @description The claim's fulfillment status 
       * @default not_fulfilled 
       * @enum {string}
       */
      fulfillment_status: "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_returned" | "returned" | "canceled" | "requires_action";
      /** @description The items that have been claimed */
      claim_items?: (components["schemas"]["ClaimItem"])[];
      /** @description Refers to the new items to be shipped when the claim order has the type `replace` */
      additional_items?: (components["schemas"]["LineItem"])[];
      /**
       * @description The ID of the order that the claim comes from. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /** @description A return object. Holds information about the return if the claim is to be returned. Available if the relation 'return_order' is expanded */
      return_order?: components["schemas"]["Return"];
      /**
       * @description The ID of the address that the new items should be shipped to 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      shipping_address_id: string | null;
      /** @description Available if the relation `shipping_address` is expanded. */
      shipping_address?: components["schemas"]["Address"];
      /** @description The shipping methods that the claim order will be shipped with. */
      shipping_methods?: (components["schemas"]["ShippingMethod"])[];
      /** @description The fulfillments of the new items to be shipped */
      fulfillments?: (components["schemas"]["Fulfillment"])[];
      /**
       * @description The amount that will be refunded in conjunction with the claim 
       * @example 1000
       */
      refund_amount: number | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the claim was canceled.
       */
      canceled_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
      /**
       * @description Flag for describing whether or not notifications related to this should be send. 
       * @example false
       */
      no_notification: boolean | null;
      /** @description Randomly generated key used to continue the completion of the cart associated with the claim in case of failure. */
      idempotency_key: string | null;
    };
    /**
     * Claim Tag 
     * @description Claim Tags are user defined tags that can be assigned to claim items for easy filtering and grouping.
     */
    ClaimTag: {
      /**
       * @description The claim tag's ID 
       * @example ctag_01G8ZCC5Y63B95V6B5SHBZ91S4
       */
      id: string;
      /**
       * @description The value that the claim tag holds 
       * @example Damaged
       */
      value: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Country 
     * @description Country details
     */
    Country: {
      /**
       * @description The country's ID 
       * @example 109
       */
      id: string;
      /**
       * @description The 2 character ISO code of the country in lower case 
       * @example it
       */
      iso_2: string;
      /**
       * @description The 2 character ISO code of the country in lower case 
       * @example ita
       */
      iso_3: string;
      /**
       * @description The numerical ISO code for the country. 
       * @example 380
       */
      num_code: string;
      /**
       * @description The normalized country name in upper case. 
       * @example ITALY
       */
      name: string;
      /**
       * @description The country name appropriate for display. 
       * @example Italy
       */
      display_name: string;
      /**
       * @description The region ID this country is associated with. 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string | null;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
    };
    /**
     * Create Stock Location Input 
     * @description Represents the Input to create a Stock Location
     */
    CreateStockLocationInput: {
      /** @description The stock location name */
      name: string;
      /** @description The Stock location address ID */
      address_id?: string;
      /** @description Stock location address object */
      address?: components["schemas"]["StockLocationAddressInput"] & Record<string, never>;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /**
     * Currency 
     * @description Currency
     */
    Currency: {
      /**
       * @description The 3 character ISO code for the currency. 
       * @example usd
       */
      code: string;
      /**
       * @description The symbol used to indicate the currency. 
       * @example $
       */
      symbol: string;
      /**
       * @description The native symbol used to indicate the currency. 
       * @example $
       */
      symbol_native: string;
      /**
       * @description The written name of the currency 
       * @example US Dollar
       */
      name: string;
      /**
       * @description [EXPERIMENTAL] Does the currency prices include tax 
       * @default false
       */
      includes_tax?: boolean;
    };
    /**
     * Custom Shipping Option 
     * @description Custom Shipping Options are 'overriden' Shipping Options. Store managers can attach a Custom Shipping Option to a cart in order to set a custom price for a particular Shipping Option
     */
    CustomShippingOption: {
      /**
       * @description The custom shipping option's ID 
       * @example cso_01G8X99XNB77DMFBJFWX6DN9V9
       */
      id: string;
      /**
       * @description The custom price set that will override the shipping option's original price 
       * @example 1000
       */
      price: number;
      /**
       * @description The ID of the Shipping Option that the custom shipping option overrides 
       * @example so_01G1G5V27GYX4QXNARRQCW1N8T
       */
      shipping_option_id: string;
      /** @description A shipping option object. Available if the relation `shipping_option` is expanded. */
      shipping_option?: components["schemas"]["ShippingOption"];
      /**
       * @description The ID of the Cart that the custom shipping option is attached to 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Customer 
     * @description Represents a customer
     */
    Customer: {
      /**
       * @description The customer's ID 
       * @example cus_01G2SG30J8C85S4A5CHM2S1NS2
       */
      id: string;
      /**
       * Format: email 
       * @description The customer's email
       */
      email: string;
      /**
       * @description The customer's first name 
       * @example Arno
       */
      first_name: string | null;
      /**
       * @description The customer's last name 
       * @example Willms
       */
      last_name: string | null;
      /**
       * @description The customer's billing address ID 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      billing_address_id: string | null;
      /** @description Available if the relation `billing_address` is expanded. */
      billing_address?: components["schemas"]["Address"];
      /** @description Available if the relation `shipping_addresses` is expanded. */
      shipping_addresses?: (components["schemas"]["Address"])[];
      /**
       * @description The customer's phone number 
       * @example 16128234334802
       */
      phone: string | null;
      /**
       * @description Whether the customer has an account or not 
       * @default false
       */
      has_account: boolean;
      /** @description Available if the relation `orders` is expanded. */
      orders?: (components["schemas"]["Order"])[];
      /** @description The customer groups the customer belongs to. Available if the relation `groups` is expanded. */
      groups?: (components["schemas"]["CustomerGroup"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Customer Group 
     * @description Represents a customer group
     */
    CustomerGroup: {
      /**
       * @description The customer group's ID 
       * @example cgrp_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /**
       * @description The name of the customer group 
       * @example VIP
       */
      name: string;
      /** @description The customers that belong to the customer group. Available if the relation `customers` is expanded. */
      customers?: (components["schemas"]["Customer"])[];
      /** @description The price lists that are associated with the customer group. Available if the relation `price_lists` is expanded. */
      price_lists?: (components["schemas"]["PriceList"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Discount 
     * @description Represents a discount that can be applied to a cart for promotional purposes.
     */
    Discount: {
      /**
       * @description The discount's ID 
       * @example disc_01F0YESMW10MGHWJKZSDDMN0VN
       */
      id: string;
      /**
       * @description A unique code for the discount - this will be used by the customer to apply the discount 
       * @example 10DISC
       */
      code: string;
      /**
       * @description A flag to indicate if multiple instances of the discount can be generated. I.e. for newsletter discounts 
       * @example false
       */
      is_dynamic: boolean;
      /**
       * @description The Discount Rule that governs the behaviour of the Discount 
       * @example dru_01F0YESMVK96HVX7N419E3CJ7C
       */
      rule_id: string | null;
      /** @description Available if the relation `rule` is expanded. */
      rule?: components["schemas"]["DiscountRule"];
      /**
       * @description Whether the Discount has been disabled. Disabled discounts cannot be applied to carts 
       * @example false
       */
      is_disabled: boolean;
      /**
       * @description The Discount that the discount was created from. This will always be a dynamic discount 
       * @example disc_01G8ZH853YPY9B94857DY91YGW
       */
      parent_discount_id: string | null;
      /** @description Available if the relation `parent_discount` is expanded. */
      parent_discount?: components["schemas"]["Discount"];
      /**
       * Format: date-time 
       * @description The time at which the discount can be used.
       */
      starts_at: string;
      /**
       * Format: date-time 
       * @description The time at which the discount can no longer be used.
       */
      ends_at: string | null;
      /**
       * @description Duration the discount runs between 
       * @example P3Y6M4DT12H30M5S
       */
      valid_duration: string | null;
      /** @description The Regions in which the Discount can be used. Available if the relation `regions` is expanded. */
      regions?: (components["schemas"]["Region"])[];
      /**
       * @description The maximum number of times that a discount can be used. 
       * @example 100
       */
      usage_limit: number | null;
      /**
       * @description The number of times a discount has been used. 
       * @default 0 
       * @example 50
       */
      usage_count: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Discount Condition 
     * @description Holds rule conditions for when a discount is applicable
     */
    DiscountCondition: {
      /**
       * @description The discount condition's ID 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /**
       * @description The type of the Condition 
       * @enum {string}
       */
      type: "products" | "product_types" | "product_collections" | "product_tags" | "customer_groups";
      /**
       * @description The operator of the Condition 
       * @enum {string}
       */
      operator: "in" | "not_in";
      /**
       * @description The ID of the discount rule associated with the condition 
       * @example dru_01F0YESMVK96HVX7N419E3CJ7C
       */
      discount_rule_id: string;
      /** @description Available if the relation `discount_rule` is expanded. */
      discount_rule?: components["schemas"]["DiscountRule"];
      /** @description products associated with this condition if type = products. Available if the relation `products` is expanded. */
      products?: (components["schemas"]["Product"])[];
      /** @description Product types associated with this condition if type = product_types. Available if the relation `product_types` is expanded. */
      product_types?: (components["schemas"]["ProductType"])[];
      /** @description Product tags associated with this condition if type = product_tags. Available if the relation `product_tags` is expanded. */
      product_tags?: (components["schemas"]["ProductTag"])[];
      /** @description Product collections associated with this condition if type = product_collections. Available if the relation `product_collections` is expanded. */
      product_collections?: (components["schemas"]["ProductCollection"])[];
      /** @description Customer groups associated with this condition if type = customer_groups. Available if the relation `customer_groups` is expanded. */
      customer_groups?: (components["schemas"]["CustomerGroup"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Tag Discount Condition 
     * @description Associates a discount condition with a customer group
     */
    DiscountConditionCustomerGroup: {
      /**
       * @description The ID of the Product Tag 
       * @example cgrp_01G8ZH853Y6TFXWPG5EYE81X63
       */
      customer_group_id: string;
      /**
       * @description The ID of the Discount Condition 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      condition_id: string;
      /** @description Available if the relation `customer_group` is expanded. */
      customer_group?: components["schemas"]["CustomerGroup"];
      /** @description Available if the relation `discount_condition` is expanded. */
      discount_condition?: components["schemas"]["DiscountCondition"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Discount Condition 
     * @description Associates a discount condition with a product
     */
    DiscountConditionProduct: {
      /**
       * @description The ID of the Product Tag 
       * @example prod_01G1G5V2MBA328390B5AXJ610F
       */
      product_id: string;
      /**
       * @description The ID of the Discount Condition 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      condition_id: string;
      /** @description Available if the relation `product` is expanded. */
      product?: components["schemas"]["Product"];
      /** @description Available if the relation `discount_condition` is expanded. */
      discount_condition?: components["schemas"]["DiscountCondition"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Collection Discount Condition 
     * @description Associates a discount condition with a product collection
     */
    DiscountConditionProductCollection: {
      /**
       * @description The ID of the Product Collection 
       * @example pcol_01F0YESBFAZ0DV6V831JXWH0BG
       */
      product_collection_id: string;
      /**
       * @description The ID of the Discount Condition 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      condition_id: string;
      /** @description Available if the relation `product_collection` is expanded. */
      product_collection?: components["schemas"]["ProductCollection"];
      /** @description Available if the relation `discount_condition` is expanded. */
      discount_condition?: components["schemas"]["DiscountCondition"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Tag Discount Condition 
     * @description Associates a discount condition with a product tag
     */
    DiscountConditionProductTag: {
      /**
       * @description The ID of the Product Tag 
       * @example ptag_01F0YESHPZYY3H4SJ3A5918SBN
       */
      product_tag_id: string;
      /**
       * @description The ID of the Discount Condition 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      condition_id: string;
      /** @description Available if the relation `product_tag` is expanded. */
      product_tag?: components["schemas"]["ProductTag"];
      /** @description Available if the relation `discount_condition` is expanded. */
      discount_condition?: components["schemas"]["DiscountCondition"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Type Discount Condition 
     * @description Associates a discount condition with a product type
     */
    DiscountConditionProductType: {
      /**
       * @description The ID of the Product Tag 
       * @example ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      product_type_id: string;
      /**
       * @description The ID of the Discount Condition 
       * @example discon_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      condition_id: string;
      /** @description Available if the relation `product_type` is expanded. */
      product_type?: components["schemas"]["ProductType"];
      /** @description Available if the relation `discount_condition` is expanded. */
      discount_condition?: components["schemas"]["DiscountCondition"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Discount Rule 
     * @description Holds the rules that governs how a Discount is calculated when applied to a Cart.
     */
    DiscountRule: {
      /**
       * @description The discount rule's ID 
       * @example dru_01F0YESMVK96HVX7N419E3CJ7C
       */
      id: string;
      /**
       * @description The type of the Discount, can be `fixed` for discounts that reduce the price by a fixed amount, `percentage` for percentage reductions or `free_shipping` for shipping vouchers. 
       * @example percentage 
       * @enum {string}
       */
      type: "fixed" | "percentage" | "free_shipping";
      /**
       * @description A short description of the discount 
       * @example 10 Percent
       */
      description: string | null;
      /**
       * @description The value that the discount represents; this will depend on the type of the discount 
       * @example 10
       */
      value: number;
      /**
       * @description The scope that the discount should apply to. 
       * @example total 
       * @enum {string|null}
       */
      allocation: "total" | "item" | null;
      /** @description A set of conditions that can be used to limit when  the discount can be used. Available if the relation `conditions` is expanded. */
      conditions?: (components["schemas"]["DiscountCondition"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * DraftOrder 
     * @description Represents a draft order
     */
    DraftOrder: {
      /**
       * @description The draft order's ID 
       * @example dorder_01G8TJFKBG38YYFQ035MSVG03C
       */
      id: string;
      /**
       * @description The status of the draft order 
       * @default open 
       * @enum {string}
       */
      status: "open" | "completed";
      /**
       * @description The draft order's display ID 
       * @example 2
       */
      display_id: string;
      /**
       * @description The ID of the cart associated with the draft order. 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The ID of the order associated with the draft order. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * Format: date-time 
       * @description The date the draft order was canceled at.
       */
      canceled_at: string | null;
      /**
       * Format: date-time 
       * @description The date the draft order was completed at.
       */
      completed_at: string | null;
      /**
       * @description Whether to send the customer notifications regarding order updates. 
       * @example false
       */
      no_notification_order: boolean | null;
      /** @description Randomly generated key used to continue the completion of the cart associated with the draft order in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /** Response Error */
    Error: {
      /** @description A slug code to indicate the type of the error. */
      code?: string;
      /** @description Description of the error that occurred. */
      message?: string;
      /** @description A slug indicating the type of the error. */
      type?: string;
    };
    ExtendedStoreDTO: components["schemas"]["Store"] & {
      payment_providers: components["schemas"]["PaymentProvider"];
      fulfillment_providers: components["schemas"]["FulfillmentProvider"];
      feature_flags: components["schemas"]["FeatureFlagsResponse"];
      modules: components["schemas"]["ModulesResponse"];
    };
    FeatureFlagsResponse: ({
        /** @description The key of the feature flag. */
        key: string;
        /** @description The value of the feature flag. */
        value: boolean;
      })[];
    /**
     * Fulfillment 
     * @description Fulfillments are created once store operators can prepare the purchased goods. Fulfillments will eventually be shipped and hold information about how to track shipments. Fulfillments are created through a provider, which is typically an external shipping aggregator, shipping partner og 3PL, most plugins will have asynchronous communications with these providers through webhooks in order to automatically update and synchronize the state of Fulfillments.
     */
    Fulfillment: {
      /**
       * @description The fulfillment's ID 
       * @example ful_01G8ZRTMQCA76TXNAT81KPJZRF
       */
      id: string;
      /**
       * @description The id of the Claim that the Fulfillment belongs to. 
       * @example null
       */
      claim_order_id: string | null;
      /** @description A claim order object. Available if the relation `claim_order` is expanded. */
      claim_order?: components["schemas"]["ClaimOrder"];
      /**
       * @description The id of the Swap that the Fulfillment belongs to. 
       * @example null
       */
      swap_id: string | null;
      /** @description A swap object. Available if the relation `swap` is expanded. */
      swap?: components["schemas"]["Swap"];
      /**
       * @description The id of the Order that the Fulfillment belongs to. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The id of the Fulfillment Provider responsible for handling the fulfillment 
       * @example manual
       */
      provider_id: string;
      /** @description Available if the relation `provider` is expanded. */
      provider?: components["schemas"]["FulfillmentProvider"];
      /**
       * @description The id of the stock location the fulfillment will be shipped from 
       * @example sloc_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      location_id: string | null;
      /** @description The Fulfillment Items in the Fulfillment - these hold information about how many of each Line Item has been fulfilled. Available if the relation `items` is expanded. */
      items?: (components["schemas"]["FulfillmentItem"])[];
      /** @description The Tracking Links that can be used to track the status of the Fulfillment, these will usually be provided by the Fulfillment Provider. Available if the relation `tracking_links` is expanded. */
      tracking_links?: (components["schemas"]["TrackingLink"])[];
      /**
       * @deprecated 
       * @description The tracking numbers that can be used to track the status of the fulfillment.
       */
      tracking_numbers: (string)[];
      /**
       * @description This contains all the data necessary for the Fulfillment provider to handle the fulfillment. 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Fulfillment was shipped.
       */
      shipped_at: string | null;
      /**
       * @description Flag for describing whether or not notifications related to this should be sent. 
       * @example false
       */
      no_notification: boolean | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Fulfillment was canceled.
       */
      canceled_at: string | null;
      /** @description Randomly generated key used to continue the completion of the fulfillment in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Fulfillment Item 
     * @description Correlates a Line Item with a Fulfillment, keeping track of the quantity of the Line Item.
     */
    FulfillmentItem: {
      /**
       * @description The id of the Fulfillment that the Fulfillment Item belongs to. 
       * @example ful_01G8ZRTMQCA76TXNAT81KPJZRF
       */
      fulfillment_id: string;
      /**
       * @description The id of the Line Item that the Fulfillment Item references. 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      item_id: string;
      /** @description A fulfillment object. Available if the relation `fulfillment` is expanded. */
      fulfillment?: components["schemas"]["Fulfillment"];
      /** @description Available if the relation `item` is expanded. */
      item?: components["schemas"]["LineItem"];
      /**
       * @description The quantity of the Line Item that is included in the Fulfillment. 
       * @example 1
       */
      quantity: number;
    };
    /**
     * Fulfillment Provider 
     * @description Represents a fulfillment provider plugin and holds its installation status.
     */
    FulfillmentProvider: {
      /**
       * @description The id of the fulfillment provider as given by the plugin. 
       * @example manual
       */
      id: string;
      /**
       * @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. 
       * @default true
       */
      is_installed: boolean;
    };
    /**
     * Gift Card 
     * @description Gift Cards are redeemable and represent a value that can be used towards the payment of an Order.
     */
    GiftCard: {
      /**
       * @description The gift card's ID 
       * @example gift_01G8XKBPBQY2R7RBET4J7E0XQZ
       */
      id: string;
      /**
       * @description The unique code that identifies the Gift Card. This is used by the Customer to redeem the value of the Gift Card. 
       * @example 3RFT-MH2C-Y4YZ-XMN4
       */
      code: string;
      /**
       * @description The value that the Gift Card represents. 
       * @example 10
       */
      value: number;
      /**
       * @description The remaining value on the Gift Card. 
       * @example 10
       */
      balance: number;
      /**
       * @description The id of the Region in which the Gift Card is available. 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /**
       * @description The id of the Order that the Gift Card was purchased in. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description Whether the Gift Card has been disabled. Disabled Gift Cards cannot be applied to carts. 
       * @default false
       */
      is_disabled: boolean;
      /**
       * Format: date-time 
       * @description The time at which the Gift Card can no longer be used.
       */
      ends_at: string | null;
      /**
       * @description The gift card's tax rate that will be applied on calculating totals 
       * @example 0
       */
      tax_rate: number | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Gift Card Transaction 
     * @description Gift Card Transactions are created once a Customer uses a Gift Card to pay for their Order
     */
    GiftCardTransaction: {
      /**
       * @description The gift card transaction's ID 
       * @example gct_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /**
       * @description The ID of the Gift Card that was used in the transaction. 
       * @example gift_01G8XKBPBQY2R7RBET4J7E0XQZ
       */
      gift_card_id: string;
      /** @description A gift card object. Available if the relation `gift_card` is expanded. */
      gift_card?: components["schemas"]["GiftCard"];
      /**
       * @description The ID of the Order that the Gift Card was used to pay for. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The amount that was used from the Gift Card. 
       * @example 10
       */
      amount: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * @description Whether the transaction is taxable or not. 
       * @example false
       */
      is_taxable: boolean | null;
      /**
       * @description The tax rate of the transaction 
       * @example 0
       */
      tax_rate: number | null;
    };
    /**
     * Idempotency Key 
     * @description Idempotency Key is used to continue a process in case of any failure that might occur.
     */
    IdempotencyKey: {
      /**
       * @description The idempotency key's ID 
       * @example ikey_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /** @description The unique randomly generated key used to determine the state of a process. */
      idempotency_key: string;
      /**
       * Format: date-time 
       * @description Date which the idempotency key was locked.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description Date which the idempotency key was locked.
       */
      locked_at: string | null;
      /**
       * @description The method of the request 
       * @example POST
       */
      request_method: string | null;
      /**
       * @description The parameters passed to the request 
       * @example {
       *   "id": "cart_01G8ZH853Y6TFXWPG5EYE81X63"
       * }
       */
      request_params: Record<string, unknown> | null;
      /**
       * @description The request's path 
       * @example /store/carts/cart_01G8ZH853Y6TFXWPG5EYE81X63/complete
       */
      request_path: string | null;
      /**
       * @description The response's code. 
       * @example 200
       */
      response_code: string | null;
      /**
       * @description The response's body 
       * @example {
       *   "id": "cart_01G8ZH853Y6TFXWPG5EYE81X63"
       * }
       */
      response_body: Record<string, unknown> | null;
      /**
       * @description Where to continue from. 
       * @default started
       */
      recovery_point: string;
    };
    /**
     * Image 
     * @description Images holds a reference to a URL at which the image file can be found.
     */
    Image: {
      /**
       * @description The image's ID 
       * @example img_01G749BFYR6T8JTVW6SGW3K3E6
       */
      id: string;
      /**
       * Format: uri 
       * @description The URL at which the image file can be found.
       */
      url: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    InventoryItemDTO: {
      /** @description The Stock Keeping Unit (SKU) code of the Inventory Item. */
      sku: string;
      /** @description The Harmonized System code of the Inventory Item. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      hs_code?: string;
      /** @description The country in which the Inventory Item was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      origin_country?: string;
      /** @description The Manufacturers Identification code that identifies the manufacturer of the Inventory Item. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      mid_code?: string;
      /** @description Title of the inventory item */
      title?: string;
      /** @description Description of the inventory item */
      description?: string;
      /** @description Thumbnail for the inventory item */
      thumbnail?: string;
      /** @description The material and composition that the Inventory Item is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      material?: string;
      /** @description The weight of the Inventory Item. May be used in shipping rate calculations. */
      weight?: number;
      /** @description The height of the Inventory Item. May be used in shipping rate calculations. */
      height?: number;
      /** @description The width of the Inventory Item. May be used in shipping rate calculations. */
      width?: number;
      /** @description The length of the Inventory Item. May be used in shipping rate calculations. */
      length?: number;
      /** @description Whether the item requires shipping. */
      requires_shipping?: boolean;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    InventoryLevelDTO: {
      /** @description the item location ID */
      location_id: string;
      /** @description the total stock quantity of an inventory item at the given location ID */
      stocked_quantity: number;
      /** @description the reserved stock quantity of an inventory item at the given location ID */
      reserved_quantity: number;
      /** @description the incoming stock quantity of an inventory item at the given location ID */
      incoming_quantity: number;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    /**
     * Invite 
     * @description Represents an invite
     */
    Invite: {
      /**
       * @description The invite's ID 
       * @example invite_01G8TKE4XYCTHSCK2GDEP47RE1
       */
      id: string;
      /**
       * Format: email 
       * @description The email of the user being invited.
       */
      user_email: string;
      /**
       * @description The user's role. 
       * @default member 
       * @enum {string|null}
       */
      role: "admin" | "member" | "developer" | null;
      /**
       * @description Whether the invite was accepted or not. 
       * @default false
       */
      accepted: boolean;
      /** @description The token used to accept the invite. */
      token: string;
      /**
       * Format: date-time 
       * @description The date the invite expires at.
       */
      expires_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Line Item 
     * @description Line Items represent purchasable units that can be added to a Cart for checkout. When Line Items are purchased they will get copied to the resulting order and can eventually be referenced in Fulfillments and Returns. Line Items may also be created when processing Swaps and Claims.
     */
    LineItem: {
      /**
       * @description The line item's ID 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      id: string;
      /**
       * @description The ID of the Cart that the Line Item belongs to. 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The ID of the Order that the Line Item belongs to. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The id of the Swap that the Line Item belongs to. 
       * @example null
       */
      swap_id: string | null;
      /** @description A swap object. Available if the relation `swap` is expanded. */
      swap?: components["schemas"]["Swap"];
      /**
       * @description The id of the Claim that the Line Item belongs to. 
       * @example null
       */
      claim_order_id: string | null;
      /** @description A claim order object. Available if the relation `claim_order` is expanded. */
      claim_order?: components["schemas"]["ClaimOrder"];
      /** @description Available if the relation `tax_lines` is expanded. */
      tax_lines?: (components["schemas"]["LineItemTaxLine"])[];
      /** @description Available if the relation `adjustments` is expanded. */
      adjustments?: (components["schemas"]["LineItemAdjustment"])[];
      /** @description The id of the original line item */
      original_item_id: string | null;
      /** @description The ID of the order edit to which a cloned item belongs */
      order_edit_id: string | null;
      /** @description The order edit joined. Available if the relation `order_edit` is expanded. */
      order_edit?: components["schemas"]["OrderEdit"];
      /**
       * @description The title of the Line Item, this should be easily identifiable by the Customer. 
       * @example Medusa Coffee Mug
       */
      title: string;
      /**
       * @description A more detailed description of the contents of the Line Item. 
       * @example One Size
       */
      description: string | null;
      /**
       * Format: uri 
       * @description A URL string to a small image of the contents of the Line Item. 
       * @example https://medusa-public-images.s3.eu-west-1.amazonaws.com/coffee-mug.png
       */
      thumbnail: string | null;
      /**
       * @description Is the item being returned 
       * @default false
       */
      is_return: boolean;
      /**
       * @description Flag to indicate if the Line Item is a Gift Card. 
       * @default false
       */
      is_giftcard: boolean;
      /**
       * @description Flag to indicate if new Line Items with the same variant should be merged or added as an additional Line Item. 
       * @default true
       */
      should_merge: boolean;
      /**
       * @description Flag to indicate if the Line Item should be included when doing discount calculations. 
       * @default true
       */
      allow_discounts: boolean;
      /**
       * @description Flag to indicate if the Line Item has fulfillment associated with it. 
       * @example false
       */
      has_shipping: boolean | null;
      /**
       * @description The price of one unit of the content in the Line Item. This should be in the currency defined by the Cart/Order/Swap/Claim that the Line Item belongs to. 
       * @example 8000
       */
      unit_price: number;
      /**
       * @description The id of the Product Variant contained in the Line Item. 
       * @example variant_01G1G5V2MRX2V3PVSR2WXYPFB6
       */
      variant_id: string | null;
      /** @description A product variant object. The Product Variant contained in the Line Item. Available if the relation `variant` is expanded. */
      variant?: components["schemas"]["ProductVariant"];
      /**
       * @description The quantity of the content in the Line Item. 
       * @example 1
       */
      quantity: number;
      /**
       * @description The quantity of the Line Item that has been fulfilled. 
       * @example 0
       */
      fulfilled_quantity: number | null;
      /**
       * @description The quantity of the Line Item that has been returned. 
       * @example 0
       */
      returned_quantity: number | null;
      /**
       * @description The quantity of the Line Item that has been shipped. 
       * @example 0
       */
      shipped_quantity: number | null;
      /**
       * @description The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration. 
       * @example 0
       */
      refundable?: number;
      /**
       * @description The subtotal of the line item 
       * @example 8000
       */
      subtotal?: number;
      /**
       * @description The total of tax of the line item 
       * @example 0
       */
      tax_total?: number;
      /**
       * @description The total amount of the line item 
       * @example 8000
       */
      total?: number;
      /**
       * @description The original total amount of the line item 
       * @example 8000
       */
      original_total?: number;
      /**
       * @description The original tax total amount of the line item 
       * @example 0
       */
      original_tax_total?: number;
      /**
       * @description The total of discount of the line item rounded 
       * @example 0
       */
      discount_total?: number;
      /**
       * @description The total of discount of the line item 
       * @example 0
       */
      raw_discount_total?: number;
      /**
       * @description The total of the gift card of the line item 
       * @example 0
       */
      gift_card_total?: number;
      /**
       * @description [EXPERIMENTAL] Indicates if the line item unit_price include tax 
       * @default false
       */
      includes_tax?: boolean;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Line Item Adjustment 
     * @description Represents a Line Item Adjustment
     */
    LineItemAdjustment: {
      /**
       * @description The Line Item Adjustment's ID 
       * @example lia_01G8TKE4XYCTHSCK2GDEP47RE1
       */
      id: string;
      /**
       * @description The ID of the line item 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      item_id: string;
      /** @description Available if the relation `item` is expanded. */
      item?: components["schemas"]["LineItem"];
      /**
       * @description The line item's adjustment description 
       * @example Adjusted item's price.
       */
      description: string;
      /**
       * @description The ID of the discount associated with the adjustment 
       * @example disc_01F0YESMW10MGHWJKZSDDMN0VN
       */
      discount_id: string | null;
      /** @description Available if the relation `discount` is expanded. */
      discount?: components["schemas"]["Discount"];
      /**
       * @description The adjustment amount 
       * @example 1000
       */
      amount: number;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Line Item Tax Line 
     * @description Represents a Line Item Tax Line
     */
    LineItemTaxLine: {
      /**
       * @description The line item tax line's ID 
       * @example litl_01G1G5V2DRX1SK6NQQ8VVX4HQ8
       */
      id: string;
      /**
       * @description A code to identify the tax type by 
       * @example tax01
       */
      code: string | null;
      /**
       * @description A human friendly name for the tax 
       * @example Tax Example
       */
      name: string;
      /**
       * @description The numeric rate to charge tax by 
       * @example 10
       */
      rate: number;
      /**
       * @description The ID of the line item 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      item_id: string;
      /** @description Available if the relation `item` is expanded. */
      item?: components["schemas"]["LineItem"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    ModulesResponse: ({
        /** @description The key of the module. */
        module: string;
        /** @description The resolution path of the module or false if module is not installed. */
        resolution: string;
      })[];
    /**
     * Money Amount 
     * @description Money Amounts represents an amount that a given Product Variant can be purcased for. Each Money Amount either has a Currency or Region associated with it to indicate the pricing in a given Currency or, for fully region-based pricing, the given price in a specific Region. If region-based pricing is used the amount will be in the currency defined for the Reigon.
     */
    MoneyAmount: {
      /**
       * @description The money amount's ID 
       * @example ma_01F0YESHRFQNH5S8Q0PK84YYZN
       */
      id: string;
      /**
       * @description The 3 character currency code that the Money Amount is given in. 
       * @example usd
       */
      currency_code: string;
      /** @description Available if the relation `currency` is expanded. */
      currency?: components["schemas"]["Currency"];
      /**
       * @description The amount in the smallest currecny unit (e.g. cents 100 cents to charge $1) that the Product Variant will cost. 
       * @example 100
       */
      amount: number;
      /**
       * @description The minimum quantity that the Money Amount applies to. If this value is not set, the Money Amount applies to all quantities. 
       * @example 1
       */
      min_quantity: number | null;
      /**
       * @description The maximum quantity that the Money Amount applies to. If this value is not set, the Money Amount applies to all quantities. 
       * @example 1
       */
      max_quantity: number | null;
      /**
       * @description The ID of the price list associated with the money amount 
       * @example pl_01G8X3CKJXCG5VXVZ87H9KC09W
       */
      price_list_id: string | null;
      /** @description Available if the relation `price_list` is expanded. */
      price_list?: components["schemas"]["PriceList"];
      /**
       * @description The id of the Product Variant contained in the Line Item. 
       * @example variant_01G1G5V2MRX2V3PVSR2WXYPFB6
       */
      variant_id: string | null;
      /** @description The Product Variant contained in the Line Item. Available if the relation `variant` is expanded. */
      variant?: components["schemas"]["ProductVariant"];
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string | null;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /** Multiple Errors */
    MultipleErrors: {
      /** @description Array of errors */
      errors?: (components["schemas"]["Error"])[];
      /** @default Provided request body contains errors. Please check the data and retry the request */
      message?: string;
    };
    /**
     * Note 
     * @description Notes are elements which we can use in association with different resources to allow users to describe additional information in relation to these.
     */
    Note: {
      /**
       * @description The note's ID 
       * @example note_01G8TM8ENBMC7R90XRR1G6H26Q
       */
      id: string;
      /**
       * @description The type of resource that the Note refers to. 
       * @example order
       */
      resource_type: string;
      /**
       * @description The ID of the resource that the Note refers to. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      resource_id: string;
      /**
       * @description The contents of the note. 
       * @example This order must be fulfilled on Monday
       */
      value: string;
      /**
       * @description The ID of the author (user) 
       * @example usr_01G1G5V26F5TB3GPAPNJ8X1S3V
       */
      author_id: string | null;
      /** @description Available if the relation `author` is expanded. */
      author?: components["schemas"]["User"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Notification 
     * @description Notifications a communications sent via Notification Providers as a reaction to internal events such as `order.placed`. Notifications can be used to show a chronological timeline for communications sent to a Customer regarding an Order, and enables resends.
     */
    Notification: {
      /**
       * @description The notification's ID 
       * @example noti_01G53V9Y6CKMCGBM1P0X7C28RX
       */
      id: string;
      /**
       * @description The name of the event that the notification was sent for. 
       * @example order.placed
       */
      event_name: string | null;
      /**
       * @description The type of resource that the Notification refers to. 
       * @example order
       */
      resource_type: string;
      /**
       * @description The ID of the resource that the Notification refers to. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      resource_id: string;
      /**
       * @description The ID of the Customer that the Notification was sent to. 
       * @example cus_01G2SG30J8C85S4A5CHM2S1NS2
       */
      customer_id: string | null;
      /** @description A customer object. Available if the relation `customer` is expanded. */
      customer?: components["schemas"]["Customer"];
      /**
       * @description The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id 
       * @example user@example.com
       */
      to: string;
      /**
       * @description The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend. 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * @description The notification's parent ID 
       * @example noti_01G53V9Y6CKMCGBM1P0X7C28RX
       */
      parent_id: string | null;
      /** @description Available if the relation `parent_notification` is expanded. */
      parent_notification?: components["schemas"]["Notification"];
      /** @description The resends that have been completed after the original Notification. Available if the relation `resends` is expanded. */
      resends?: (components["schemas"]["Notification"])[];
      /**
       * @description The id of the Notification Provider that handles the Notification. 
       * @example sengrid
       */
      provider_id: string | null;
      /** @description Available if the relation `provider` is expanded. */
      provider?: components["schemas"]["NotificationProvider"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
    };
    /**
     * Notification Provider 
     * @description Represents a notification provider plugin and holds its installation status.
     */
    NotificationProvider: {
      /**
       * @description The id of the notification provider as given by the plugin. 
       * @example sendgrid
       */
      id: string;
      /**
       * @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. 
       * @default true
       */
      is_installed: boolean;
    };
    /**
     * OAuth 
     * @description Represent an OAuth app
     */
    OAuth: {
      /**
       * @description The app's ID 
       * @example example_app
       */
      id: string;
      /**
       * @description The app's display name 
       * @example Example app
       */
      display_name: string;
      /**
       * @description The app's name 
       * @example example
       */
      application_name: string;
      /**
       * Format: uri 
       * @description The URL to install the app
       */
      install_url: string | null;
      /**
       * Format: uri 
       * @description The URL to uninstall the app
       */
      uninstall_url: string | null;
      /**
       * @description Any data necessary to the app. 
       * @example {}
       */
      data: Record<string, unknown> | null;
    };
    /**
     * Order 
     * @description Represents an order
     */
    Order: {
      /**
       * @description The order's ID 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      id: string;
      /**
       * @description The order's status 
       * @default pending 
       * @enum {string}
       */
      status: "pending" | "completed" | "archived" | "canceled" | "requires_action";
      /**
       * @description The order's fulfillment status 
       * @default not_fulfilled 
       * @enum {string}
       */
      fulfillment_status: "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_returned" | "returned" | "canceled" | "requires_action";
      /**
       * @description The order's payment status 
       * @default not_paid 
       * @enum {string}
       */
      payment_status: "not_paid" | "awaiting" | "captured" | "partially_refunded" | "refunded" | "canceled" | "requires_action";
      /**
       * @description The order's display ID 
       * @example 2
       */
      display_id: number;
      /**
       * @description The ID of the cart associated with the order 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The ID of the customer associated with the order 
       * @example cus_01G2SG30J8C85S4A5CHM2S1NS2
       */
      customer_id: string;
      /** @description A customer object. Available if the relation `customer` is expanded. */
      customer?: components["schemas"]["Customer"];
      /**
       * Format: email 
       * @description The email associated with the order
       */
      email: string;
      /**
       * @description The ID of the billing address associated with the order 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      billing_address_id: string | null;
      /** @description Available if the relation `billing_address` is expanded. */
      billing_address?: components["schemas"]["Address"];
      /**
       * @description The ID of the shipping address associated with the order 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      shipping_address_id: string | null;
      /** @description Available if the relation `shipping_address` is expanded. */
      shipping_address?: components["schemas"]["Address"];
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /**
       * @description The 3 character currency code that is used in the order 
       * @example usd
       */
      currency_code: string;
      /** @description Available if the relation `currency` is expanded. */
      currency?: components["schemas"]["Currency"];
      /**
       * @description The order's tax rate 
       * @example 0
       */
      tax_rate: number | null;
      /** @description The discounts used in the order. Available if the relation `discounts` is expanded. */
      discounts?: (components["schemas"]["Discount"])[];
      /** @description The gift cards used in the order. Available if the relation `gift_cards` is expanded. */
      gift_cards?: (components["schemas"]["GiftCard"])[];
      /** @description The shipping methods used in the order. Available if the relation `shipping_methods` is expanded. */
      shipping_methods?: (components["schemas"]["ShippingMethod"])[];
      /** @description The payments used in the order. Available if the relation `payments` is expanded. */
      payments?: (components["schemas"]["Payment"])[];
      /** @description The fulfillments used in the order. Available if the relation `fulfillments` is expanded. */
      fulfillments?: (components["schemas"]["Fulfillment"])[];
      /** @description The returns associated with the order. Available if the relation `returns` is expanded. */
      returns?: (components["schemas"]["Return"])[];
      /** @description The claims associated with the order. Available if the relation `claims` is expanded. */
      claims?: (components["schemas"]["ClaimOrder"])[];
      /** @description The refunds associated with the order. Available if the relation `refunds` is expanded. */
      refunds?: (components["schemas"]["Refund"])[];
      /** @description The swaps associated with the order. Available if the relation `swaps` is expanded. */
      swaps?: (components["schemas"]["Swap"])[];
      /**
       * @description The ID of the draft order this order is associated with. 
       * @example null
       */
      draft_order_id: string | null;
      /** @description A draft order object. Available if the relation `draft_order` is expanded. */
      draft_order?: components["schemas"]["DraftOrder"];
      /** @description The line items that belong to the order. Available if the relation `items` is expanded. */
      items?: (components["schemas"]["LineItem"])[];
      /** @description Order edits done on the order. Available if the relation `edits` is expanded. */
      edits?: (components["schemas"]["OrderEdit"])[];
      /** @description The gift card transactions used in the order. Available if the relation `gift_card_transactions` is expanded. */
      gift_card_transactions?: (components["schemas"]["GiftCardTransaction"])[];
      /**
       * Format: date-time 
       * @description The date the order was canceled on.
       */
      canceled_at: string | null;
      /**
       * @description Flag for describing whether or not notifications related to this should be send. 
       * @example false
       */
      no_notification: boolean | null;
      /** @description Randomly generated key used to continue the processing of the order in case of failure. */
      idempotency_key: string | null;
      /**
       * @description The ID of an external order. 
       * @example null
       */
      external_id: string | null;
      /**
       * @description The ID of the sales channel this order is associated with. 
       * @example null
       */
      sales_channel_id?: string | null;
      /** @description A sales channel object. Available if the relation `sales_channel` is expanded. */
      sales_channel?: components["schemas"]["SalesChannel"];
      /**
       * @description The total of shipping 
       * @example 1000
       */
      shipping_total?: number;
      /**
       * @description The total of discount 
       * @example 800
       */
      raw_discount_total?: number;
      /**
       * @description The total of discount rounded 
       * @example 800
       */
      discount_total?: number;
      /**
       * @description The total of tax 
       * @example 0
       */
      tax_total?: number;
      /**
       * @description The total amount refunded if the order is returned. 
       * @example 0
       */
      refunded_total?: number;
      /**
       * @description The total amount of the order 
       * @example 8200
       */
      total?: number;
      /**
       * @description The subtotal of the order 
       * @example 8000
       */
      subtotal?: number;
      /**
       * @description The total amount paid 
       * @example 8000
       */
      paid_total?: number;
      /**
       * @description The amount that can be refunded 
       * @example 8200
       */
      refundable_amount?: number;
      /**
       * @description The total of gift cards 
       * @example 0
       */
      gift_card_total?: number;
      /**
       * @description The total of gift cards with taxes 
       * @example 0
       */
      gift_card_tax_total?: number;
      /** @description The items that are returnable as part of the order, order swaps or order claims */
      returnable_items?: (components["schemas"]["LineItem"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Order Edit 
     * @description Order edit keeps track of order items changes.
     */
    OrderEdit: {
      /**
       * @description The order edit's ID 
       * @example oe_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      id: string;
      /**
       * @description The ID of the order that is edited 
       * @example order_01G2SG30J8C85S4A5CHM2S1NS2
       */
      order_id: string;
      /** @description Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /** @description Available if the relation `changes` is expanded. */
      changes?: (components["schemas"]["OrderItemChange"])[];
      /**
       * @description An optional note with additional details about the order edit. 
       * @example Included two more items B to the order.
       */
      internal_note: string | null;
      /** @description The unique identifier of the user or customer who created the order edit. */
      created_by: string;
      /** @description The unique identifier of the user or customer who requested the order edit. */
      requested_by: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the edit was requested.
       */
      requested_at: string | null;
      /** @description The unique identifier of the user or customer who confirmed the order edit. */
      confirmed_by: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the edit was confirmed.
       */
      confirmed_at: string | null;
      /** @description The unique identifier of the user or customer who declined the order edit. */
      declined_by: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the edit was declined.
       */
      declined_at: string | null;
      /** @description An optional note why  the order edit is declined. */
      declined_reason: string | null;
      /** @description The unique identifier of the user or customer who cancelled the order edit. */
      canceled_by: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the edit was cancelled.
       */
      canceled_at: string | null;
      /**
       * @description The total of subtotal 
       * @example 8000
       */
      subtotal?: number;
      /**
       * @description The total of discount 
       * @example 800
       */
      discount_total?: number;
      /**
       * @description The total of the shipping amount 
       * @example 800
       */
      shipping_total?: number;
      /**
       * @description The total of the gift card amount 
       * @example 800
       */
      gift_card_total?: number;
      /**
       * @description The total of the gift card tax amount 
       * @example 800
       */
      gift_card_tax_total?: number;
      /**
       * @description The total of tax 
       * @example 0
       */
      tax_total?: number;
      /**
       * @description The total amount of the edited order. 
       * @example 8200
       */
      total?: number;
      /**
       * @description The difference between the total amount of the order and total amount of edited order. 
       * @example 8200
       */
      difference_due?: number;
      /**
       * @description The status of the order edit. 
       * @enum {string}
       */
      status: "confirmed" | "declined" | "requested" | "created" | "canceled";
      /** @description Available if the relation `items` is expanded. */
      items?: (components["schemas"]["LineItem"])[];
      /**
       * @description The ID of the payment collection 
       * @example paycol_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      payment_collection_id: string | null;
      /** @description Available if the relation `payment_collection` is expanded. */
      payment_collection?: components["schemas"]["PaymentCollection"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
    };
    /**
     * Order Item Change 
     * @description Represents an order edit item change
     */
    OrderItemChange: {
      /**
       * @description The order item change's ID 
       * @example oic_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      id: string;
      /**
       * @description The order item change's status 
       * @enum {string}
       */
      type: "item_add" | "item_remove" | "item_update";
      /**
       * @description The ID of the order edit 
       * @example oe_01G2SG30J8C85S4A5CHM2S1NS2
       */
      order_edit_id: string;
      /** @description Available if the relation `order_edit` is expanded. */
      order_edit?: components["schemas"]["OrderEdit"];
      /**
       * @description The ID of the original line item in the order 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      original_line_item_id: string | null;
      /** @description Available if the relation `original_line_item` is expanded. */
      original_line_item?: components["schemas"]["LineItem"];
      /**
       * @description The ID of the cloned line item. 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      line_item_id: string | null;
      /** @description Available if the relation `line_item` is expanded. */
      line_item?: components["schemas"]["LineItem"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Payment 
     * @description Payments represent an amount authorized with a given payment method, Payments can be captured, canceled or refunded.
     */
    Payment: {
      /**
       * @description The payment's ID 
       * @example pay_01G2SJNT6DEEWDFNAJ4XWDTHKE
       */
      id: string;
      /**
       * @description The ID of the Swap that the Payment is used for. 
       * @example null
       */
      swap_id: string | null;
      /** @description A swap object. Available if the relation `swap` is expanded. */
      swap?: components["schemas"]["Swap"];
      /** @description The id of the Cart that the Payment Session is created for. */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The ID of the Order that the Payment is used for. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The amount that the Payment has been authorized for. 
       * @example 100
       */
      amount: number;
      /**
       * @description The 3 character ISO currency code that the Payment is completed in. 
       * @example usd
       */
      currency_code: string;
      /** @description Available if the relation `currency` is expanded. */
      currency?: components["schemas"]["Currency"];
      /**
       * @description The amount of the original Payment amount that has been refunded back to the Customer. 
       * @default 0 
       * @example 0
       */
      amount_refunded: number;
      /**
       * @description The id of the Payment Provider that is responsible for the Payment 
       * @example manual
       */
      provider_id: string;
      /**
       * @description The data required for the Payment Provider to identify, modify and process the Payment. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Payment was captured.
       */
      captured_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Payment was canceled.
       */
      canceled_at: string | null;
      /** @description Randomly generated key used to continue the completion of a payment in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Payment Collection 
     * @description Payment Collection
     */
    PaymentCollection: {
      /**
       * @description The payment collection's ID 
       * @example paycol_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      id: string;
      /**
       * @description The type of the payment collection 
       * @enum {string}
       */
      type: "order_edit";
      /**
       * @description The type of the payment collection 
       * @enum {string}
       */
      status: "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "canceled";
      /** @description Description of the payment collection */
      description: string | null;
      /** @description Amount of the payment collection. */
      amount: number;
      /** @description Authorized amount of the payment collection. */
      authorized_amount: number | null;
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /**
       * @description The 3 character ISO code for the currency. 
       * @example usd
       */
      currency_code: string;
      /** @description Available if the relation `currency` is expanded. */
      currency?: components["schemas"]["Currency"];
      /** @description Available if the relation `payment_sessions` is expanded. */
      payment_sessions?: (components["schemas"]["PaymentSession"])[];
      /** @description Available if the relation `payments` is expanded. */
      payments?: (components["schemas"]["Payment"])[];
      /** @description The ID of the user that created the payment collection. */
      created_by: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Payment Provider 
     * @description Represents a Payment Provider plugin and holds its installation status.
     */
    PaymentProvider: {
      /**
       * @description The id of the payment provider as given by the plugin. 
       * @example manual
       */
      id: string;
      /**
       * @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. 
       * @default true
       */
      is_installed: boolean;
    };
    /**
     * Payment Session 
     * @description Payment Sessions are created when a Customer initilizes the checkout flow, and can be used to hold the state of a payment flow. Each Payment Session is controlled by a Payment Provider, who is responsible for the communication with external payment services. Authorized Payment Sessions will eventually get promoted to Payments to indicate that they are authorized for capture/refunds/etc.
     */
    PaymentSession: {
      /**
       * @description The payment session's ID 
       * @example ps_01G901XNSRM2YS3ASN9H5KG3FZ
       */
      id: string;
      /**
       * @description The id of the Cart that the Payment Session is created for. 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The id of the Payment Provider that is responsible for the Payment Session 
       * @example manual
       */
      provider_id: string;
      /**
       * @description A flag to indicate if the Payment Session has been selected as the method that will be used to complete the purchase. 
       * @example true
       */
      is_selected: boolean | null;
      /**
       * @description A flag to indicate if a communication with the third party provider has been initiated. 
       * @default false 
       * @example true
       */
      is_initiated: boolean;
      /**
       * @description Indicates the status of the Payment Session. Will default to `pending`, and will eventually become `authorized`. Payment Sessions may have the status of `requires_more` to indicate that further actions are to be completed by the Customer. 
       * @example pending 
       * @enum {string}
       */
      status: "authorized" | "pending" | "requires_more" | "error" | "canceled";
      /**
       * @description The data required for the Payment Provider to identify, modify and process the Payment Session. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. 
       * @example {}
       */
      data: Record<string, never>;
      /** @description Randomly generated key used to continue the completion of a cart in case of failure. */
      idempotency_key: string | null;
      /**
       * @description The amount that the Payment Session has been authorized for. 
       * @example 100
       */
      amount: number | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Payment Session was authorized.
       */
      payment_authorized_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
    };
    /**
     * Price List 
     * @description Price Lists represents a set of prices that overrides the default price for one or more product variants.
     */
    PriceList: {
      /**
       * @description The price list's ID 
       * @example pl_01G8X3CKJXCG5VXVZ87H9KC09W
       */
      id: string;
      /**
       * @description The price list's name 
       * @example VIP Prices
       */
      name: string;
      /**
       * @description The price list's description 
       * @example Prices for VIP customers
       */
      description: string;
      /**
       * @description The type of Price List. This can be one of either `sale` or `override`. 
       * @default sale 
       * @enum {string}
       */
      type: "sale" | "override";
      /**
       * @description The status of the Price List 
       * @default draft 
       * @enum {string}
       */
      status: "active" | "draft";
      /**
       * Format: date-time 
       * @description The date with timezone that the Price List starts being valid.
       */
      starts_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone that the Price List stops being valid.
       */
      ends_at: string | null;
      /** @description The Customer Groups that the Price List applies to. Available if the relation `customer_groups` is expanded. */
      customer_groups?: (components["schemas"]["CustomerGroup"])[];
      /** @description The Money Amounts that are associated with the Price List. Available if the relation `prices` is expanded. */
      prices?: (components["schemas"]["MoneyAmount"])[];
      /**
       * @description [EXPERIMENTAL] Does the price list prices include tax 
       * @default false
       */
      includes_tax?: boolean;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /** Priced Product */
    PricedProduct: components["schemas"]["Product"] & {
      variants?: (components["schemas"]["PricedVariant"])[];
    };
    /** Priced Shipping Option */
    PricedShippingOption: components["schemas"]["ShippingOption"] & {
      /** @description Price including taxes */
      price_incl_tax?: number;
      /** @description An array of applied tax rates */
      tax_rates?: ({
          /** @description The tax rate value */
          rate?: number;
          /** @description The name of the tax rate */
          name?: string;
          /** @description The code of the tax rate */
          code?: string;
        })[];
      /** @description The taxes applied. */
      tax_amount?: number;
    };
    /** Priced Product Variant */
    PricedVariant: components["schemas"]["ProductVariant"] & {
      /** @description The original price of the variant without any discounted prices applied. */
      original_price?: number;
      /** @description The calculated price of the variant. Can be a discounted price. */
      calculated_price?: number;
      /** @description The original price of the variant including taxes. */
      original_price_incl_tax?: number;
      /** @description The calculated price of the variant including taxes. */
      calculated_price_incl_tax?: number;
      /** @description The taxes applied on the original price. */
      original_tax?: number;
      /** @description The taxes applied on the calculated price. */
      calculated_tax?: number;
      /** @description An array of applied tax rates */
      tax_rates?: ({
          /** @description The tax rate value */
          rate?: number;
          /** @description The name of the tax rate */
          name?: string;
          /** @description The code of the tax rate */
          code?: string;
        })[];
    };
    /**
     * Product 
     * @description Products are a grouping of Product Variants that have common properties such as images and descriptions. Products can have multiple options which define the properties that Product Variants differ by.
     */
    Product: {
      /**
       * @description The product's ID 
       * @example prod_01G1G5V2MBA328390B5AXJ610F
       */
      id: string;
      /**
       * @description A title that can be displayed for easy identification of the Product. 
       * @example Medusa Coffee Mug
       */
      title: string;
      /** @description An optional subtitle that can be used to further specify the Product. */
      subtitle: string | null;
      /**
       * @description A short description of the Product. 
       * @example Every programmer's best friend.
       */
      description: string | null;
      /**
       * @description A unique identifier for the Product (e.g. for slug structure). 
       * @example coffee-mug
       */
      handle: string | null;
      /**
       * @description Whether the Product represents a Gift Card. Products that represent Gift Cards will automatically generate a redeemable Gift Card code once they are purchased. 
       * @default false
       */
      is_giftcard: boolean;
      /**
       * @description The status of the product 
       * @default draft 
       * @enum {string}
       */
      status: "draft" | "proposed" | "published" | "rejected";
      /** @description Images of the Product. Available if the relation `images` is expanded. */
      images?: (components["schemas"]["Image"])[];
      /**
       * Format: uri 
       * @description A URL to an image file that can be used to identify the Product.
       */
      thumbnail: string | null;
      /** @description The Product Options that are defined for the Product. Product Variants of the Product will have a unique combination of Product Option Values. Available if the relation `options` is expanded. */
      options?: (components["schemas"]["ProductOption"])[];
      /** @description The Product Variants that belong to the Product. Each will have a unique combination of Product Option Values. Available if the relation `variants` is expanded. */
      variants?: (components["schemas"]["ProductVariant"])[];
      /** @description The product's associated categories. Available if the relation `categories` are expanded. */
      categories?: (components["schemas"]["ProductCategory"])[];
      /**
       * @description The ID of the Shipping Profile that the Product belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. 
       * @example sp_01G1G5V239ENSZ5MV4JAR737BM
       */
      profile_id: string;
      /** @description Available if the relation `profile` is expanded. */
      profile?: components["schemas"]["ShippingProfile"];
      /**
       * @description The weight of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      weight: number | null;
      /**
       * @description The length of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      length: number | null;
      /**
       * @description The height of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      height: number | null;
      /**
       * @description The width of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      width: number | null;
      /**
       * @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      hs_code: string | null;
      /**
       * @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      origin_country: string | null;
      /**
       * @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      mid_code: string | null;
      /**
       * @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      material: string | null;
      /**
       * @description The Product Collection that the Product belongs to 
       * @example pcol_01F0YESBFAZ0DV6V831JXWH0BG
       */
      collection_id: string | null;
      /** @description A product collection object. Available if the relation `collection` is expanded. */
      collection?: components["schemas"]["ProductCollection"];
      /**
       * @description The Product type that the Product belongs to 
       * @example ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      type_id: string | null;
      /** @description Available if the relation `type` is expanded. */
      type?: components["schemas"]["ProductType"];
      /** @description The Product Tags assigned to the Product. Available if the relation `tags` is expanded. */
      tags?: (components["schemas"]["ProductTag"])[];
      /**
       * @description Whether the Product can be discounted. Discounts will not apply to Line Items of this Product when this flag is set to `false`. 
       * @default true
       */
      discountable: boolean;
      /**
       * @description The external ID of the product 
       * @example null
       */
      external_id: string | null;
      /** @description The sales channels the product is associated with. Available if the relation `sales_channels` is expanded. */
      sales_channels?: (components["schemas"]["SalesChannel"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * ProductCategory 
     * @description Represents a product category
     */
    ProductCategory: {
      /**
       * @description The product category's ID 
       * @example pcat_01G2SG30J8C85S4A5CHM2S1NS2
       */
      id: string;
      /**
       * @description The product category's name 
       * @example Regular Fit
       */
      name: string;
      /**
       * @description A unique string that identifies the Product Category - can for example be used in slug structures. 
       * @example regular-fit
       */
      handle: string;
      /**
       * @description A string for Materialized Paths - used for finding ancestors and descendents 
       * @example pcat_id1.pcat_id2.pcat_id3
       */
      mpath: string | null;
      /**
       * @description A flag to make product category an internal category for admins 
       * @default false
       */
      is_internal: boolean;
      /**
       * @description A flag to make product category visible/hidden in the store front 
       * @default false
       */
      is_active: boolean;
      /**
       * @description An integer that depicts the rank of category in a tree node 
       * @default 0
       */
      rank?: number;
      /** @description Available if the relation `category_children` are expanded. */
      category_children: (components["schemas"]["ProductCategory"])[];
      /**
       * @description The ID of the parent category. 
       * @default null
       */
      parent_category_id: string | null;
      /** @description A product category object. Available if the relation `parent_category` is expanded. */
      parent_category?: components["schemas"]["ProductCategory"];
      /** @description Products associated with category. Available if the relation `products` is expanded. */
      products?: (components["schemas"]["Product"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
    };
    /**
     * Product Collection 
     * @description Product Collections represents a group of Products that are related.
     */
    ProductCollection: {
      /**
       * @description The product collection's ID 
       * @example pcol_01F0YESBFAZ0DV6V831JXWH0BG
       */
      id: string;
      /**
       * @description The title that the Product Collection is identified by. 
       * @example Summer Collection
       */
      title: string;
      /**
       * @description A unique string that identifies the Product Collection - can for example be used in slug structures. 
       * @example summer-collection
       */
      handle: string | null;
      /** @description The Products contained in the Product Collection. Available if the relation `products` is expanded. */
      products?: (components["schemas"]["Product"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Option 
     * @description Product Options define properties that may vary between different variants of a Product. Common Product Options are "Size" and "Color", but Medusa doesn't limit what Product Options that can be defined.
     */
    ProductOption: {
      /**
       * @description The product option's ID 
       * @example opt_01F0YESHQBZVKCEXJ24BS6PCX3
       */
      id: string;
      /**
       * @description The title that the Product Option is defined by (e.g. `Size`). 
       * @example Size
       */
      title: string;
      /** @description The Product Option Values that are defined for the Product Option. Available if the relation `values` is expanded. */
      values?: (components["schemas"]["ProductOptionValue"])[];
      /**
       * @description The ID of the Product that the Product Option is defined for. 
       * @example prod_01G1G5V2MBA328390B5AXJ610F
       */
      product_id: string;
      /** @description A product object. Available if the relation `product` is expanded. */
      product?: components["schemas"]["Product"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Option Value 
     * @description A value given to a Product Variant's option set. Product Variant have a Product Option Value for each of the Product Options defined on the Product.
     */
    ProductOptionValue: {
      /**
       * @description The product option value's ID 
       * @example optval_01F0YESHR7S6ECD03RF6W12DSJ
       */
      id: string;
      /**
       * @description The value that the Product Variant has defined for the specific Product Option (e.g. if the Product Option is \"Size\" this value could be `Small`, `Medium` or `Large`). 
       * @example large
       */
      value: string;
      /**
       * @description The ID of the Product Option that the Product Option Value is defined for. 
       * @example opt_01F0YESHQBZVKCEXJ24BS6PCX3
       */
      option_id: string;
      /** @description Available if the relation `option` is expanded. */
      option?: components["schemas"]["ProductOption"];
      /**
       * @description The ID of the Product Variant that the Product Option Value is defined for. 
       * @example variant_01G1G5V2MRX2V3PVSR2WXYPFB6
       */
      variant_id: string;
      /** @description Available if the relation `variant` is expanded. */
      variant?: components["schemas"]["ProductVariant"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Tag 
     * @description Product Tags can be added to Products for easy filtering and grouping.
     */
    ProductTag: {
      /**
       * @description The product tag's ID 
       * @example ptag_01G8K2MTMG9168F2B70S1TAVK3
       */
      id: string;
      /**
       * @description The value that the Product Tag represents 
       * @example Pants
       */
      value: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Tax Rate 
     * @description Associates a tax rate with a product to indicate that the product is taxed in a certain way
     */
    ProductTaxRate: {
      /**
       * @description The ID of the Product 
       * @example prod_01G1G5V2MBA328390B5AXJ610F
       */
      product_id: string;
      /** @description Available if the relation `product` is expanded. */
      product?: components["schemas"]["Product"];
      /**
       * @description The ID of the Tax Rate 
       * @example txr_01G8XDBAWKBHHJRKH0AV02KXBR
       */
      rate_id: string;
      /** @description Available if the relation `tax_rate` is expanded. */
      tax_rate?: components["schemas"]["TaxRate"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Type 
     * @description Product Type can be added to Products for filtering and reporting purposes.
     */
    ProductType: {
      /**
       * @description The product type's ID 
       * @example ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /**
       * @description The value that the Product Type represents. 
       * @example Clothing
       */
      value: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Type Tax Rate 
     * @description Associates a tax rate with a product type to indicate that the product type is taxed in a certain way
     */
    ProductTypeTaxRate: {
      /**
       * @description The ID of the Product type 
       * @example ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      product_type_id: string;
      /** @description Available if the relation `product_type` is expanded. */
      product_type?: components["schemas"]["ProductType"];
      /**
       * @description The id of the Tax Rate 
       * @example txr_01G8XDBAWKBHHJRKH0AV02KXBR
       */
      rate_id: string;
      /** @description Available if the relation `tax_rate` is expanded. */
      tax_rate?: components["schemas"]["TaxRate"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Product Variant 
     * @description Product Variants represent a Product with a specific set of Product Option configurations. The maximum number of Product Variants that a Product can have is given by the number of available Product Option combinations.
     */
    ProductVariant: {
      /**
       * @description The product variant's ID 
       * @example variant_01G1G5V2MRX2V3PVSR2WXYPFB6
       */
      id: string;
      /**
       * @description A title that can be displayed for easy identification of the Product Variant. 
       * @example Small
       */
      title: string;
      /**
       * @description The ID of the Product that the Product Variant belongs to. 
       * @example prod_01G1G5V2MBA328390B5AXJ610F
       */
      product_id: string;
      /** @description A product object. Available if the relation `product` is expanded. */
      product?: components["schemas"]["Product"];
      /** @description The Money Amounts defined for the Product Variant. Each Money Amount represents a price in a given currency or a price in a specific Region. Available if the relation `prices` is expanded. */
      prices?: (components["schemas"]["MoneyAmount"])[];
      /**
       * @description The unique stock keeping unit used to identify the Product Variant. This will usually be a unqiue identifer for the item that is to be shipped, and can be referenced across multiple systems. 
       * @example shirt-123
       */
      sku: string | null;
      /**
       * @description A generic field for a GTIN number that can be used to identify the Product Variant. 
       * @example null
       */
      barcode: string | null;
      /**
       * @description An EAN barcode number that can be used to identify the Product Variant. 
       * @example null
       */
      ean: string | null;
      /**
       * @description A UPC barcode number that can be used to identify the Product Variant. 
       * @example null
       */
      upc: string | null;
      /**
       * @description The ranking of this variant 
       * @default 0
       */
      variant_rank?: number | null;
      /**
       * @description The current quantity of the item that is stocked. 
       * @example 100
       */
      inventory_quantity: number;
      /**
       * @description Whether the Product Variant should be purchasable when `inventory_quantity` is 0. 
       * @default false
       */
      allow_backorder: boolean;
      /**
       * @description Whether Medusa should manage inventory for the Product Variant. 
       * @default true
       */
      manage_inventory: boolean;
      /**
       * @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      hs_code: string | null;
      /**
       * @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      origin_country: string | null;
      /**
       * @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      mid_code: string | null;
      /**
       * @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. 
       * @example null
       */
      material: string | null;
      /**
       * @description The weight of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      weight: number | null;
      /**
       * @description The length of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      length: number | null;
      /**
       * @description The height of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      height: number | null;
      /**
       * @description The width of the Product Variant. May be used in shipping rate calculations. 
       * @example null
       */
      width: number | null;
      /** @description The Product Option Values specified for the Product Variant. Available if the relation `options` is expanded. */
      options?: (components["schemas"]["ProductOptionValue"])[];
      /** @description The Inventory Items related to the product variant. Available if the relation `inventory_items` is expanded. */
      inventory_items?: (components["schemas"]["ProductVariantInventoryItem"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
      /**
       * @description Only used with the inventory modules.
       * A boolean value indicating whether the Product Variant is purchasable.
       * A variant is purchasable if:
       *   - inventory is not managed
       *   - it has no inventory items
       *   - it is in stock
       *   - it is backorderable.
       */
      purchasable?: boolean;
    };
    /**
     * Product Variant Inventory Item 
     * @description Product Variant Inventory Items link variants with inventory items and denote the number of inventory items constituting a variant.
     */
    ProductVariantInventoryItem: {
      /**
       * @description The product variant inventory item's ID 
       * @example pvitem_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /** @description The id of the inventory item */
      inventory_item_id: string;
      /** @description The id of the variant. */
      variant_id: string;
      /** @description A ProductVariant object. Available if the relation `variant` is expanded. */
      variant?: components["schemas"]["ProductVariant"];
      /**
       * @description The quantity of an inventory item required for one quantity of the variant. 
       * @default 1
       */
      required_quantity: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Publishable API key 
     * @description Publishable API key defines scopes (i.e. resources) that are available within a request.
     */
    PublishableApiKey: {
      /**
       * @description The key's ID 
       * @example pk_01G1G5V27GYX4QXNARRQCW1N8T
       */
      id: string;
      /**
       * @description The unique identifier of the user that created the key. 
       * @example usr_01G1G5V26F5TB3GPAPNJ8X1S3V
       */
      created_by: string | null;
      /**
       * @description The unique identifier of the user that revoked the key. 
       * @example usr_01G1G5V26F5TB3GPAPNJ8X1S3V
       */
      revoked_by: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the key was revoked.
       */
      revoked_at: string | null;
      /** @description The key's title. */
      title: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
    };
    /**
     * Publishable API key sales channel 
     * @description Holds mapping between Publishable API keys and Sales Channels
     */
    PublishableApiKeySalesChannel: {
      /**
       * @description The sales channel's ID 
       * @example sc_01G1G5V21KADXNGH29BJMAJ4B4
       */
      sales_channel_id: string;
      /**
       * @description The publishable API key's ID 
       * @example pak_01G1G5V21KADXNGH29BJMAJ4B4
       */
      publishable_key_id: string;
    };
    /**
     * Refund 
     * @description Refund represent an amount of money transfered back to the Customer for a given reason. Refunds may occur in relation to Returns, Swaps and Claims, but can also be initiated by a store operator.
     */
    Refund: {
      /**
       * @description The refund's ID 
       * @example ref_01G1G5V27GYX4QXNARRQCW1N8T
       */
      id: string;
      /**
       * @description The id of the Order that the Refund is related to. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The payment's ID if available 
       * @example pay_01G8ZCC5W42ZNY842124G7P5R9
       */
      payment_id: string | null;
      /** @description Available if the relation `payment` is expanded. */
      payment?: components["schemas"]["Payment"];
      /**
       * @description The amount that has be refunded to the Customer. 
       * @example 1000
       */
      amount: number;
      /**
       * @description An optional note explaining why the amount was refunded. 
       * @example I didn't like it
       */
      note: string | null;
      /**
       * @description The reason given for the Refund, will automatically be set when processed as part of a Swap, Claim or Return. 
       * @example return 
       * @enum {string}
       */
      reason: "discount" | "return" | "swap" | "claim" | "other";
      /** @description Randomly generated key used to continue the completion of the refund in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Region 
     * @description Regions hold settings for how Customers in a given geographical location shop. The is, for example, where currencies and tax rates are defined. A Region can consist of multiple countries to accomodate common shopping settings across countries.
     */
    Region: {
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      id: string;
      /**
       * @description The name of the region as displayed to the customer. If the Region only has one country it is recommended to write the country name. 
       * @example EU
       */
      name: string;
      /**
       * @description The 3 character currency code that the Region uses. 
       * @example usd
       */
      currency_code: string;
      /** @description Available if the relation `currency` is expanded. */
      currency?: components["schemas"]["Currency"];
      /**
       * @description The tax rate that should be charged on purchases in the Region. 
       * @example 0
       */
      tax_rate: number;
      /** @description The tax rates that are included in the Region. Available if the relation `tax_rates` is expanded. */
      tax_rates?: (components["schemas"]["TaxRate"])[];
      /**
       * @description The tax code used on purchases in the Region. This may be used by other systems for accounting purposes. 
       * @example null
       */
      tax_code: string | null;
      /**
       * @description Whether the gift cards are taxable or not in this region. 
       * @default true
       */
      gift_cards_taxable: boolean;
      /**
       * @description Whether taxes should be automated in this region. 
       * @default true
       */
      automatic_taxes: boolean;
      /** @description The countries that are included in the Region. Available if the relation `countries` is expanded. */
      countries?: (components["schemas"]["Country"])[];
      /**
       * @description The ID of the tax provider used in this region 
       * @example null
       */
      tax_provider_id: string | null;
      /** @description Available if the relation `tax_provider` is expanded. */
      tax_provider?: components["schemas"]["TaxProvider"];
      /** @description The Payment Providers that can be used to process Payments in the Region. Available if the relation `payment_providers` is expanded. */
      payment_providers?: (components["schemas"]["PaymentProvider"])[];
      /** @description The Fulfillment Providers that can be used to fulfill orders in the Region. Available if the relation `fulfillment_providers` is expanded. */
      fulfillment_providers?: (components["schemas"]["FulfillmentProvider"])[];
      /**
       * @description [EXPERIMENTAL] Does the prices for the region include tax 
       * @default false
       */
      includes_tax?: boolean;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Reservation item 
     * @description Represents a reservation of an inventory item at a stock location
     */
    ReservationItemDTO: {
      /** @description The id of the reservation item */
      id: string;
      /** @description The id of the location of the reservation */
      location_id: string;
      /** @description The id of the inventory item the reservation relates to */
      inventory_item_id: string;
      /** @description Description of the reservation item */
      description?: string;
      /** @description UserId of user who created the reservation item */
      created_by?: string;
      /** @description The id of the reservation item */
      quantity: number;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    /**
     * Return 
     * @description Return orders hold information about Line Items that a Customer wishes to send back, along with how the items will be returned. Returns can be used as part of a Swap.
     */
    Return: {
      /**
       * @description The return's ID 
       * @example ret_01F0YET7XPCMF8RZ0Y151NZV2V
       */
      id: string;
      /**
       * @description Status of the Return. 
       * @default requested 
       * @enum {string}
       */
      status: "requested" | "received" | "requires_action" | "canceled";
      /** @description The Return Items that will be shipped back to the warehouse. Available if the relation `items` is expanded. */
      items?: (components["schemas"]["ReturnItem"])[];
      /**
       * @description The ID of the Swap that the Return is a part of. 
       * @example null
       */
      swap_id: string | null;
      /** @description A swap object. Available if the relation `swap` is expanded. */
      swap?: components["schemas"]["Swap"];
      /**
       * @description The ID of the Claim that the Return is a part of. 
       * @example null
       */
      claim_order_id: string | null;
      /** @description A claim order object. Available if the relation `claim_order` is expanded. */
      claim_order?: components["schemas"]["ClaimOrder"];
      /**
       * @description The ID of the Order that the Return is made from. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /** @description The Shipping Method that will be used to send the Return back. Can be null if the Customer facilitates the return shipment themselves. Available if the relation `shipping_method` is expanded. */
      shipping_method?: components["schemas"]["ShippingMethod"];
      /**
       * @description Data about the return shipment as provided by the Fulfilment Provider that handles the return shipment. 
       * @example {}
       */
      shipping_data: Record<string, unknown> | null;
      /**
       * @description The id of the stock location the return will be added back. 
       * @example sloc_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      location_id: string | null;
      /**
       * @description The amount that should be refunded as a result of the return. 
       * @example 1000
       */
      refund_amount: number;
      /**
       * @description When set to true, no notification will be sent related to this return. 
       * @example false
       */
      no_notification: boolean | null;
      /** @description Randomly generated key used to continue the completion of the return in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the return was received.
       */
      received_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Return Item 
     * @description Correlates a Line Item with a Return, keeping track of the quantity of the Line Item that will be returned.
     */
    ReturnItem: {
      /**
       * @description The id of the Return that the Return Item belongs to. 
       * @example ret_01F0YET7XPCMF8RZ0Y151NZV2V
       */
      return_id: string;
      /**
       * @description The id of the Line Item that the Return Item references. 
       * @example item_01G8ZC9GWT6B2GP5FSXRXNFNGN
       */
      item_id: string;
      /** @description Available if the relation `return_order` is expanded. */
      return_order?: components["schemas"]["Return"];
      /** @description Available if the relation `item` is expanded. */
      item?: components["schemas"]["LineItem"];
      /**
       * @description The quantity of the Line Item that is included in the Return. 
       * @example 1
       */
      quantity: number;
      /**
       * @description Whether the Return Item was requested initially or received unexpectedly in the warehouse. 
       * @default true
       */
      is_requested: boolean;
      /**
       * @description The quantity that was originally requested to be returned. 
       * @example 1
       */
      requested_quantity: number | null;
      /**
       * @description The quantity that was received in the warehouse. 
       * @example 1
       */
      received_quantity: number | null;
      /**
       * @description The ID of the reason for returning the item. 
       * @example rr_01G8X82GCCV2KSQHDBHSSAH5TQ
       */
      reason_id: string | null;
      /** @description Available if the relation `reason` is expanded. */
      reason?: components["schemas"]["ReturnReason"];
      /**
       * @description An optional note with additional details about the Return. 
       * @example I didn't like it.
       */
      note: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Return Reason 
     * @description A Reason for why a given product is returned. A Return Reason can be used on Return Items in order to indicate why a Line Item was returned.
     */
    ReturnReason: {
      /**
       * @description The return reason's ID 
       * @example rr_01G8X82GCCV2KSQHDBHSSAH5TQ
       */
      id: string;
      /**
       * @description The value to identify the reason by. 
       * @example damaged
       */
      value: string;
      /**
       * @description A text that can be displayed to the Customer as a reason. 
       * @example Damaged goods
       */
      label: string;
      /**
       * @description A description of the Reason. 
       * @example Items that are damaged
       */
      description: string | null;
      /**
       * @description The ID of the parent reason. 
       * @example null
       */
      parent_return_reason_id: string | null;
      /** @description Available if the relation `parent_return_reason` is expanded. */
      parent_return_reason?: components["schemas"]["ReturnReason"];
      /** @description Available if the relation `return_reason_children` is expanded. */
      return_reason_children?: components["schemas"]["ReturnReason"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Sales Channel 
     * @description A Sales Channel
     */
    SalesChannel: {
      /**
       * @description The sales channel's ID 
       * @example sc_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /**
       * @description The name of the sales channel. 
       * @example Market
       */
      name: string;
      /**
       * @description The description of the sales channel. 
       * @example Multi-vendor market
       */
      description: string | null;
      /**
       * @description Specify if the sales channel is enabled or disabled. 
       * @default false
       */
      is_disabled: boolean;
      /** @description The Stock Locations related to the sales channel. Available if the relation `locations` is expanded. */
      locations?: (components["schemas"]["SalesChannelLocation"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Sales Channel Stock Location 
     * @description Sales Channel Stock Location link sales channels with stock locations.
     */
    SalesChannelLocation: {
      /**
       * @description The Sales Channel Stock Location's ID 
       * @example scloc_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      id: string;
      /**
       * @description The id of the Sales Channel 
       * @example sc_01G8X9A7ESKAJXG2H0E6F1MW7A
       */
      sales_channel_id: string;
      /** @description The id of the Location Stock. */
      location_id: string;
      /** @description The sales channel the location is associated with. Available if the relation `sales_channel` is expanded. */
      sales_channel?: components["schemas"]["SalesChannel"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Shipping Method 
     * @description Shipping Methods represent a way in which an Order or Return can be shipped. Shipping Methods are built from a Shipping Option, but may contain additional details, that can be necessary for the Fulfillment Provider to handle the shipment.
     */
    ShippingMethod: {
      /**
       * @description The shipping method's ID 
       * @example sm_01F0YET7DR2E7CYVSDHM593QG2
       */
      id: string;
      /**
       * @description The id of the Shipping Option that the Shipping Method is built from. 
       * @example so_01G1G5V27GYX4QXNARRQCW1N8T
       */
      shipping_option_id: string;
      /**
       * @description The id of the Order that the Shipping Method is used on. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string | null;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /**
       * @description The id of the Claim that the Shipping Method is used on. 
       * @example null
       */
      claim_order_id: string | null;
      /** @description A claim order object. Available if the relation `claim_order` is expanded. */
      claim_order?: components["schemas"]["ClaimOrder"];
      /**
       * @description The id of the Cart that the Shipping Method is used on. 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * @description The id of the Swap that the Shipping Method is used on. 
       * @example null
       */
      swap_id: string | null;
      /** @description A swap object. Available if the relation `swap` is expanded. */
      swap?: components["schemas"]["Swap"];
      /**
       * @description The id of the Return that the Shipping Method is used on. 
       * @example null
       */
      return_id: string | null;
      /** @description A return object. Available if the relation `return_order` is expanded. */
      return_order?: components["schemas"]["Return"];
      /** @description Available if the relation `shipping_option` is expanded. */
      shipping_option?: components["schemas"]["ShippingOption"];
      /** @description Available if the relation `tax_lines` is expanded. */
      tax_lines?: (components["schemas"]["ShippingMethodTaxLine"])[];
      /**
       * @description The amount to charge for the Shipping Method. The currency of the price is defined by the Region that the Order that the Shipping Method belongs to is a part of. 
       * @example 200
       */
      price: number;
      /**
       * @description Additional data that the Fulfillment Provider needs to fulfill the shipment. This is used in combination with the Shipping Options data, and may contain information such as a drop point id. 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * @description [EXPERIMENTAL] Indicates if the shipping method price include tax 
       * @default false
       */
      includes_tax?: boolean;
      /**
       * @description The subtotal of the shipping 
       * @example 8000
       */
      subtotal?: number;
      /**
       * @description The total amount of the shipping 
       * @example 8200
       */
      total?: number;
      /**
       * @description The total of tax 
       * @example 0
       */
      tax_total?: number;
    };
    /**
     * Shipping Method Tax Line 
     * @description Shipping Method Tax Line
     */
    ShippingMethodTaxLine: {
      /**
       * @description The line item tax line's ID 
       * @example smtl_01G1G5V2DRX1SK6NQQ8VVX4HQ8
       */
      id: string;
      /**
       * @description A code to identify the tax type by 
       * @example tax01
       */
      code: string | null;
      /**
       * @description A human friendly name for the tax 
       * @example Tax Example
       */
      name: string;
      /**
       * @description The numeric rate to charge tax by 
       * @example 10
       */
      rate: number;
      /**
       * @description The ID of the line item 
       * @example sm_01F0YET7DR2E7CYVSDHM593QG2
       */
      shipping_method_id: string;
      /** @description Available if the relation `shipping_method` is expanded. */
      shipping_method?: components["schemas"]["ShippingMethod"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Shipping Option 
     * @description Shipping Options represent a way in which an Order or Return can be shipped. Shipping Options have an associated Fulfillment Provider that will be used when the fulfillment of an Order is initiated. Shipping Options themselves cannot be added to Carts, but serve as a template for Shipping Methods. This distinction makes it possible to customize individual Shipping Methods with additional information.
     */
    ShippingOption: {
      /**
       * @description The shipping option's ID 
       * @example so_01G1G5V27GYX4QXNARRQCW1N8T
       */
      id: string;
      /**
       * @description The name given to the Shipping Option - this may be displayed to the Customer. 
       * @example PostFake Standard
       */
      name: string;
      /**
       * @description The region's ID 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /**
       * @description The ID of the Shipping Profile that the shipping option belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. 
       * @example sp_01G1G5V239ENSZ5MV4JAR737BM
       */
      profile_id: string;
      /** @description Available if the relation `profile` is expanded. */
      profile?: components["schemas"]["ShippingProfile"];
      /**
       * @description The id of the Fulfillment Provider, that will be used to process Fulfillments from the Shipping Option. 
       * @example manual
       */
      provider_id: string;
      /** @description Available if the relation `provider` is expanded. */
      provider?: components["schemas"]["FulfillmentProvider"];
      /**
       * @description The type of pricing calculation that is used when creatin Shipping Methods from the Shipping Option. Can be `flat_rate` for fixed prices or `calculated` if the Fulfillment Provider can provide price calulations. 
       * @example flat_rate 
       * @enum {string}
       */
      price_type: "flat_rate" | "calculated";
      /**
       * @description The amount to charge for shipping when the Shipping Option price type is `flat_rate`. 
       * @example 200
       */
      amount: number | null;
      /**
       * @description Flag to indicate if the Shipping Option can be used for Return shipments. 
       * @default false
       */
      is_return: boolean;
      /**
       * @description Flag to indicate if the Shipping Option usage is restricted to admin users. 
       * @default false
       */
      admin_only: boolean;
      /** @description The requirements that must be satisfied for the Shipping Option to be available for a Cart. Available if the relation `requirements` is expanded. */
      requirements?: (components["schemas"]["ShippingOptionRequirement"])[];
      /**
       * @description The data needed for the Fulfillment Provider to identify the Shipping Option. 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * @description [EXPERIMENTAL] Does the shipping option price include tax 
       * @default false
       */
      includes_tax?: boolean;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Shipping Option Requirement 
     * @description A requirement that a Cart must satisfy for the Shipping Option to be available to the Cart.
     */
    ShippingOptionRequirement: {
      /**
       * @description The shipping option requirement's ID 
       * @example sor_01G1G5V29AB4CTNDRFSRWSRKWD
       */
      id: string;
      /**
       * @description The id of the Shipping Option that the hipping option requirement belongs to 
       * @example so_01G1G5V27GYX4QXNARRQCW1N8T
       */
      shipping_option_id: string;
      /** @description Available if the relation `shipping_option` is expanded. */
      shipping_option?: components["schemas"]["ShippingOption"];
      /**
       * @description The type of the requirement, this defines how the value will be compared to the Cart's total. `min_subtotal` requirements define the minimum subtotal that is needed for the Shipping Option to be available, while the `max_subtotal` defines the maximum subtotal that the Cart can have for the Shipping Option to be available. 
       * @example min_subtotal 
       * @enum {string}
       */
      type: "min_subtotal" | "max_subtotal";
      /**
       * @description The amount to compare the Cart subtotal to. 
       * @example 100
       */
      amount: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
    };
    /**
     * Shipping Profile 
     * @description Shipping Profiles have a set of defined Shipping Options that can be used to fulfill a given set of Products.
     */
    ShippingProfile: {
      /**
       * @description The shipping profile's ID 
       * @example sp_01G1G5V239ENSZ5MV4JAR737BM
       */
      id: string;
      /**
       * @description The name given to the Shipping profile - this may be displayed to the Customer. 
       * @example Default Shipping Profile
       */
      name: string;
      /**
       * @description The type of the Shipping Profile, may be `default`, `gift_card` or `custom`. 
       * @example default 
       * @enum {string}
       */
      type: "default" | "gift_card" | "custom";
      /** @description The Products that the Shipping Profile defines Shipping Options for. Available if the relation `products` is expanded. */
      products?: (components["schemas"]["Product"])[];
      /** @description The Shipping Options that can be used to fulfill the Products in the Shipping Profile. Available if the relation `shipping_options` is expanded. */
      shipping_options?: (components["schemas"]["ShippingOption"])[];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Shipping Tax Rate 
     * @description Associates a tax rate with a shipping option to indicate that the shipping option is taxed in a certain way
     */
    ShippingTaxRate: {
      /**
       * @description The ID of the Shipping Option 
       * @example so_01G1G5V27GYX4QXNARRQCW1N8T
       */
      shipping_option_id: string;
      /** @description Available if the relation `shipping_option` is expanded. */
      shipping_option?: components["schemas"]["ShippingOption"];
      /**
       * @description The ID of the Tax Rate 
       * @example txr_01G8XDBAWKBHHJRKH0AV02KXBR
       */
      rate_id: string;
      /** @description Available if the relation `tax_rate` is expanded. */
      tax_rate?: components["schemas"]["TaxRate"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Staged Job 
     * @description A staged job resource
     */
    StagedJob: {
      /**
       * @description The staged job's ID 
       * @example job_01F0YET7BZTARY9MKN1SJ7AAXF
       */
      id: string;
      /**
       * @description The name of the event 
       * @example order.placed
       */
      event_name: string;
      /**
       * @description Data necessary for the job 
       * @example {}
       */
      data: Record<string, never>;
      /**
       * @description The staged job's option 
       * @example {}
       */
      option?: Record<string, never>;
    };
    /**
     * Stock Location Address 
     * @description Represents a Stock Location Address
     */
    StockLocationAddressDTO: {
      /**
       * @description The stock location address' ID 
       * @example laddr_51G4ZW853Y6TFXWPG5ENJ81X42
       */
      id?: string;
      /**
       * @description Stock location address 
       * @example 35, Jhon Doe Ave
       */
      address_1: string;
      /**
       * @description Stock location address' complement 
       * @example apartment 4432
       */
      address_2?: string;
      /**
       * @description Stock location company' name 
       * @example Medusa
       */
      company?: string;
      /**
       * @description Stock location address' city 
       * @example Mexico city
       */
      city?: string;
      /**
       * @description Stock location address' country 
       * @example MX
       */
      country_code: string;
      /**
       * @description Stock location address' phone number 
       * @example +1 555 61646
       */
      phone?: string;
      /**
       * @description Stock location address' postal code 
       * @example HD3-1G8
       */
      postal_code?: string;
      /**
       * @description Stock location address' province 
       * @example Sinaloa
       */
      province?: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /**
     * Stock Location Address Input 
     * @description Represents a Stock Location Address Input
     */
    StockLocationAddressInput: {
      /**
       * @description Stock location address 
       * @example 35, Jhon Doe Ave
       */
      address_1: string;
      /**
       * @description Stock location address' complement 
       * @example apartment 4432
       */
      address_2?: string;
      /**
       * @description Stock location address' city 
       * @example Mexico city
       */
      city?: string;
      /**
       * @description Stock location address' country 
       * @example MX
       */
      country_code: string;
      /**
       * @description Stock location address' phone number 
       * @example +1 555 61646
       */
      phone?: string;
      /**
       * @description Stock location address' postal code 
       * @example HD3-1G8
       */
      postal_code?: string;
      /**
       * @description Stock location address' province 
       * @example Sinaloa
       */
      province?: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /**
     * Stock Location 
     * @description Represents a Stock Location
     */
    StockLocationDTO: {
      /**
       * @description The stock location's ID 
       * @example sloc_51G4ZW853Y6TFXWPG5ENJ81X42
       */
      id: string;
      /**
       * @description Stock location address' ID 
       * @example laddr_05B2ZE853Y6FTXWPW85NJ81A44
       */
      address_id: string;
      /**
       * @description The name of the stock location 
       * @example Main Warehouse
       */
      name: string;
      /** @description The Address of the Stock Location */
      address?: components["schemas"]["StockLocationAddressDTO"] & Record<string, never>;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    StockLocationExpandedDTO: components["schemas"]["StockLocationDTO"] & {
      sales_channels?: components["schemas"]["SalesChannel"];
    };
    /**
     * Store 
     * @description Holds settings for the Store, such as name, currencies, etc.
     */
    Store: {
      /**
       * @description The store's ID 
       * @example store_01G1G5V21KADXNGH29BJMAJ4B4
       */
      id: string;
      /**
       * @description The name of the Store - this may be displayed to the Customer. 
       * @example Medusa Store
       */
      name: string;
      /**
       * @description The 3 character currency code that is the default of the store. 
       * @example usd
       */
      default_currency_code: string;
      /** @description Available if the relation `default_currency` is expanded. */
      default_currency?: components["schemas"]["Currency"];
      /** @description The currencies that are enabled for the Store. Available if the relation `currencies` is expanded. */
      currencies?: (components["schemas"]["Currency"])[];
      /**
       * @description A template to generate Swap links from. Use {{cart_id}} to include the Swap's `cart_id` in the link. 
       * @example null
       */
      swap_link_template: string | null;
      /**
       * @description A template to generate Payment links from. Use {{cart_id}} to include the payment's `cart_id` in the link. 
       * @example null
       */
      payment_link_template: string | null;
      /**
       * @description A template to generate Invite links from 
       * @example null
       */
      invite_link_template: string | null;
      /**
       * @description The location ID the store is associated with. 
       * @example null
       */
      default_location_id: string | null;
      /**
       * @description The sales channel ID the cart is associated with. 
       * @example null
       */
      default_sales_channel_id?: string | null;
      /** @description A sales channel object. Available if the relation `default_sales_channel` is expanded. */
      default_sales_channel?: components["schemas"]["SalesChannel"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    StoreAuthRes: {
      customer: components["schemas"]["Customer"];
    };
    StoreCartShippingOptionsListRes: {
      shipping_options: (components["schemas"]["PricedShippingOption"])[];
    };
    StoreCartsRes: {
      cart: components["schemas"]["Cart"];
    };
    StoreCollectionsListRes: {
      collections: (components["schemas"]["ProductCollection"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreCollectionsRes: {
      collection: components["schemas"]["ProductCollection"];
    };
    StoreCompleteCartRes: {
      /**
       * @description The type of the data property. 
       * @enum {string}
       */
      type: "order" | "cart" | "swap";
      /** @description The data of the result object. Its type depends on the type field. */
      data: components["schemas"]["Order"] | components["schemas"]["Cart"] | components["schemas"]["Swap"];
    };
    StoreCustomersListOrdersRes: {
      orders: (components["schemas"]["Order"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreCustomersListPaymentMethodsRes: {
      payment_methods: ({
          /** @description The id of the Payment Provider where the payment method is saved. */
          provider_id: string;
          /** @description The data needed for the Payment Provider to use the saved payment method. */
          data: Record<string, never>;
        })[];
    };
    StoreCustomersRes: {
      customer: components["schemas"]["Customer"];
    };
    StoreCustomersResetPasswordRes: {
      customer: components["schemas"]["Customer"];
    };
    StoreGetAuthEmailRes: {
      /** @description Whether email exists or not. */
      exists: boolean;
    };
    StoreGetProductCategoriesCategoryRes: {
      product_category: components["schemas"]["ProductCategory"];
    };
    StoreGetProductCategoriesRes: {
      product_categories: (components["schemas"]["ProductCategory"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreGiftCardsRes: {
      gift_card: components["schemas"]["GiftCard"];
    };
    StoreOrderEditsRes: {
      order_edit: components["schemas"]["OrderEdit"];
    };
    StoreOrdersRes: {
      order: components["schemas"]["Order"];
    };
    StorePaymentCollectionSessionsReq: {
      /** @description The ID of the Payment Provider. */
      provider_id: string;
    };
    StorePaymentCollectionsRes: {
      payment_collection: components["schemas"]["PaymentCollection"];
    };
    StorePaymentCollectionsSessionRes: {
      payment_session: components["schemas"]["PaymentSession"];
    };
    StorePostAuthReq: {
      /** @description The Customer's email. */
      email: string;
      /** @description The Customer's password. */
      password: string;
    };
    StorePostCartReq: {
      /** @description The ID of the Region to create the Cart in. */
      region_id?: string;
      /** @description [EXPERIMENTAL] The ID of the Sales channel to create the Cart in. */
      sales_channel_id?: string;
      /** @description The 2 character ISO country code to create the Cart in. */
      country_code?: string;
      /** @description An optional array of `variant_id`, `quantity` pairs to generate Line Items from. */
      items?: ({
          /** @description The id of the Product Variant to generate a Line Item from. */
          variant_id: string;
          /** @description The quantity of the Product Variant to add */
          quantity: number;
        })[];
      /**
       * @description An optional object to provide context to the Cart. The `context` field is automatically populated with `ip` and `user_agent` 
       * @example {
       *   "ip": "::1",
       *   "user_agent": "Chrome"
       * }
       */
      context?: Record<string, never>;
    };
    StorePostCartsCartLineItemsItemReq: {
      /** @description The quantity to set the Line Item to. */
      quantity: number;
    };
    StorePostCartsCartLineItemsReq: {
      /** @description The id of the Product Variant to generate the Line Item from. */
      variant_id: string;
      /** @description The quantity of the Product Variant to add to the Line Item. */
      quantity: number;
      /** @description An optional key-value map with additional details about the Line Item. */
      metadata?: Record<string, never>;
    };
    StorePostCartsCartPaymentSessionReq: {
      /** @description The ID of the Payment Provider. */
      provider_id: string;
    };
    StorePostCartsCartPaymentSessionUpdateReq: {
      /** @description The data to update the payment session with. */
      data: Record<string, never>;
    };
    StorePostCartsCartReq: {
      /** @description The id of the Region to create the Cart in. */
      region_id?: string;
      /** @description The 2 character ISO country code to create the Cart in. */
      country_code?: string;
      /**
       * Format: email 
       * @description An email to be used on the Cart.
       */
      email?: string;
      /** @description The ID of the Sales channel to update the Cart with. */
      sales_channel_id?: string;
      /** @description The Address to be used for billing purposes. */
      billing_address?: components["schemas"]["AddressPayload"] | string;
      /** @description The Address to be used for shipping. */
      shipping_address?: components["schemas"]["AddressPayload"] | string;
      /** @description An array of Gift Card codes to add to the Cart. */
      gift_cards?: ({
          /** @description The code that a Gift Card is identified by. */
          code: string;
        })[];
      /** @description An array of Discount codes to add to the Cart. */
      discounts?: ({
          /** @description The code that a Discount is identified by. */
          code: string;
        })[];
      /** @description The ID of the Customer to associate the Cart with. */
      customer_id?: string;
      /**
       * @description An optional object to provide context to the Cart. 
       * @example {
       *   "ip": "::1",
       *   "user_agent": "Chrome"
       * }
       */
      context?: Record<string, never>;
    };
    StorePostCartsCartShippingMethodReq: {
      /** @description ID of the shipping option to create the method from */
      option_id: string;
      /** @description Used to hold any data that the shipping method may need to process the fulfillment of the order. Look at the documentation for your installed fulfillment providers to find out what to send. */
      data?: Record<string, never>;
    };
    StorePostCustomersCustomerAcceptClaimReq: {
      /** @description The invite token provided by the admin. */
      token: string;
    };
    StorePostCustomersCustomerAddressesAddressReq: components["schemas"]["AddressPayload"];
    StorePostCustomersCustomerAddressesReq: {
      /** @description The Address to add to the Customer. */
      address: components["schemas"]["AddressCreatePayload"];
    };
    StorePostCustomersCustomerOrderClaimReq: {
      /** @description The ids of the orders to claim */
      order_ids: (string)[];
    };
    StorePostCustomersCustomerPasswordTokenReq: {
      /**
       * Format: email 
       * @description The email of the customer.
       */
      email: string;
    };
    StorePostCustomersCustomerReq: {
      /** @description The Customer's first name. */
      first_name?: string;
      /** @description The Customer's last name. */
      last_name?: string;
      /** @description The Address to be used for billing purposes. */
      billing_address?: components["schemas"]["AddressPayload"] | string;
      /** @description The Customer's password. */
      password?: string;
      /** @description The Customer's phone number. */
      phone?: string;
      /** @description The email of the customer. */
      email?: string;
      /** @description Metadata about the customer. */
      metadata?: Record<string, never>;
    };
    StorePostCustomersReq: {
      /** @description The Customer's first name. */
      first_name: string;
      /** @description The Customer's last name. */
      last_name: string;
      /**
       * Format: email 
       * @description The email of the customer.
       */
      email: string;
      /**
       * Format: password 
       * @description The Customer's password.
       */
      password: string;
      /** @description The Customer's phone number. */
      phone?: string;
    };
    StorePostCustomersResetPasswordReq: {
      /**
       * Format: email 
       * @description The email of the customer.
       */
      email: string;
      /**
       * Format: password 
       * @description The Customer's password.
       */
      password: string;
      /** @description The reset password token */
      token: string;
    };
    StorePostOrderEditsOrderEditDecline: {
      /** @description The reason for declining the OrderEdit. */
      declined_reason?: string;
    };
    StorePostPaymentCollectionsBatchSessionsAuthorizeReq: {
      /** @description List of Payment Session IDs to authorize. */
      session_ids: (string)[];
    };
    StorePostPaymentCollectionsBatchSessionsReq: {
      /** @description An array of payment sessions related to the Payment Collection. If the session_id is not provided, existing sessions not present will be deleted and the provided ones will be created. */
      sessions: ({
          /** @description The ID of the Payment Provider. */
          provider_id: string;
          /** @description The amount . */
          amount: number;
          /** @description The ID of the Payment Session to be updated. */
          session_id?: string;
        })[];
    };
    StorePostReturnsReq: {
      /** @description The ID of the Order to create the Return from. */
      order_id: string;
      /** @description The items to include in the Return. */
      items: ({
          /** @description The ID of the Line Item from the Order. */
          item_id: string;
          /** @description The quantity to return. */
          quantity: number;
          /** @description The ID of the return reason. */
          reason_id?: string;
          /** @description A note to add to the item returned. */
          note?: string;
        })[];
      /** @description If the Return is to be handled by the store operator the Customer can choose a Return Shipping Method. Alternatvely the Customer can handle the Return themselves. */
      return_shipping?: {
        /** @description The ID of the Shipping Option to create the Shipping Method from. */
        option_id: string;
      };
    };
    StorePostSearchRes: {
      /** @description Array of results. The format of the items depends on the search engine installed on the server. */
      hits: (unknown)[];
    } & Record<string, never>;
    StorePostSwapsReq: {
      /** @description The ID of the Order to create the Swap for. */
      order_id: string;
      /** @description The items to include in the Return. */
      return_items: ({
          /** @description The ID of the Line Item from the Order. */
          item_id: string;
          /** @description The quantity to swap. */
          quantity: number;
          /** @description The ID of the reason of this return. */
          reason_id?: string;
          /** @description The note to add to the item being swapped. */
          note?: string;
        })[];
      /** @description The ID of the Shipping Option to create the Shipping Method from. */
      return_shipping_option?: string;
      /** @description The items to exchange the returned items to. */
      additional_items: ({
          /** @description The ID of the Product Variant to send. */
          variant_id: string;
          /** @description The quantity to send of the variant. */
          quantity: number;
        })[];
    };
    StoreProductTagsListRes: {
      product_tags: (components["schemas"]["ProductTag"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreProductTypesListRes: {
      product_types: (components["schemas"]["ProductType"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreProductsListRes: {
      products: (components["schemas"]["PricedProduct"])[];
      /** @description The total number of items available */
      count: number;
      /** @description The number of items skipped before these items */
      offset: number;
      /** @description The number of items per page */
      limit: number;
    };
    StoreProductsRes: {
      product: components["schemas"]["PricedProduct"];
    };
    StoreRegionsListRes: {
      regions: (components["schemas"]["Region"])[];
    };
    StoreRegionsRes: {
      region: components["schemas"]["Region"];
    };
    StoreReturnReasonsListRes: {
      return_reasons: (components["schemas"]["ReturnReason"])[];
    };
    StoreReturnReasonsRes: {
      return_reason: components["schemas"]["ReturnReason"];
    };
    StoreReturnsRes: {
      return: components["schemas"]["Return"];
    };
    StoreShippingOptionsListRes: {
      shipping_options: (components["schemas"]["PricedShippingOption"])[];
    };
    StoreSwapsRes: {
      swap: components["schemas"]["Swap"];
    };
    StoreVariantsListRes: {
      variants: (components["schemas"]["PricedVariant"])[];
    };
    StoreVariantsRes: {
      variant: components["schemas"]["PricedVariant"];
    };
    /**
     * Swap 
     * @description Swaps can be created when a Customer wishes to exchange Products that they have purchased to different Products. Swaps consist of a Return of previously purchased Products and a Fulfillment of new Products, the amount paid for the Products being returned will be used towards payment for the new Products. In the case where the amount paid for the the Products being returned exceed the amount to be paid for the new Products, a Refund will be issued for the difference.
     */
    Swap: {
      /**
       * @description The swap's ID 
       * @example swap_01F0YET86Y9G92D3YDR9Y6V676
       */
      id: string;
      /**
       * @description The status of the Fulfillment of the Swap. 
       * @example not_fulfilled 
       * @enum {string}
       */
      fulfillment_status: "not_fulfilled" | "fulfilled" | "shipped" | "partially_shipped" | "canceled" | "requires_action";
      /**
       * @description The status of the Payment of the Swap. The payment may either refer to the refund of an amount or the authorization of a new amount. 
       * @example not_paid 
       * @enum {string}
       */
      payment_status: "not_paid" | "awaiting" | "captured" | "confirmed" | "canceled" | "difference_refunded" | "partially_refunded" | "refunded" | "requires_action";
      /**
       * @description The ID of the Order where the Line Items to be returned where purchased. 
       * @example order_01G8TJSYT9M6AVS5N4EMNFS1EK
       */
      order_id: string;
      /** @description An order object. Available if the relation `order` is expanded. */
      order?: components["schemas"]["Order"];
      /** @description The new Line Items to ship to the Customer. Available if the relation `additional_items` is expanded. */
      additional_items?: (components["schemas"]["LineItem"])[];
      /** @description A return order object. The Return that is issued for the return part of the Swap. Available if the relation `return_order` is expanded. */
      return_order?: components["schemas"]["Return"];
      /** @description The Fulfillments used to send the new Line Items. Available if the relation `fulfillments` is expanded. */
      fulfillments?: (components["schemas"]["Fulfillment"])[];
      /** @description The Payment authorized when the Swap requires an additional amount to be charged from the Customer. Available if the relation `payment` is expanded. */
      payment?: components["schemas"]["Payment"];
      /**
       * @description The difference that is paid or refunded as a result of the Swap. May be negative when the amount paid for the returned items exceed the total of the new Products. 
       * @example 0
       */
      difference_due: number | null;
      /**
       * @description The Address to send the new Line Items to - in most cases this will be the same as the shipping address on the Order. 
       * @example addr_01G8ZH853YPY9B94857DY91YGW
       */
      shipping_address_id: string | null;
      /** @description Available if the relation `shipping_address` is expanded. */
      shipping_address?: components["schemas"]["Address"];
      /** @description The Shipping Methods used to fulfill the additional items purchased. Available if the relation `shipping_methods` is expanded. */
      shipping_methods?: (components["schemas"]["ShippingMethod"])[];
      /**
       * @description The id of the Cart that the Customer will use to confirm the Swap. 
       * @example cart_01G8ZH853Y6TFXWPG5EYE81X63
       */
      cart_id: string | null;
      /** @description A cart object. Available if the relation `cart` is expanded. */
      cart?: components["schemas"]["Cart"];
      /**
       * Format: date-time 
       * @description The date with timezone at which the Swap was confirmed by the Customer.
       */
      confirmed_at: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the Swap was canceled.
       */
      canceled_at: string | null;
      /**
       * @description If set to true, no notification will be sent related to this swap 
       * @example false
       */
      no_notification: boolean | null;
      /**
       * @description If true, swaps can be completed with items out of stock 
       * @default false
       */
      allow_backorder: boolean;
      /** @description Randomly generated key used to continue the completion of the swap in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Tax Line 
     * @description Line item that specifies an amount of tax to add to a line item.
     */
    TaxLine: {
      /**
       * @description The tax line's ID 
       * @example tl_01G1G5V2DRX1SK6NQQ8VVX4HQ8
       */
      id: string;
      /**
       * @description A code to identify the tax type by 
       * @example tax01
       */
      code: string | null;
      /**
       * @description A human friendly name for the tax 
       * @example Tax Example
       */
      name: string;
      /**
       * @description The numeric rate to charge tax by 
       * @example 10
       */
      rate: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Tax Provider 
     * @description The tax service used to calculate taxes
     */
    TaxProvider: {
      /**
       * @description The id of the tax provider as given by the plugin. 
       * @example manual
       */
      id: string;
      /**
       * @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. 
       * @default true
       */
      is_installed: boolean;
    };
    /**
     * Tax Rate 
     * @description A Tax Rate can be used to associate a certain rate to charge on products within a given Region
     */
    TaxRate: {
      /**
       * @description The tax rate's ID 
       * @example txr_01G8XDBAWKBHHJRKH0AV02KXBR
       */
      id: string;
      /**
       * @description The numeric rate to charge 
       * @example 10
       */
      rate: number | null;
      /**
       * @description A code to identify the tax type by 
       * @example tax01
       */
      code: string | null;
      /**
       * @description A human friendly name for the tax 
       * @example Tax Example
       */
      name: string;
      /**
       * @description The id of the Region that the rate belongs to 
       * @example reg_01G1G5V26T9H8Y0M4JNE3YGA4G
       */
      region_id: string;
      /** @description A region object. Available if the relation `region` is expanded. */
      region?: components["schemas"]["Region"];
      /** @description The products that belong to this tax rate. Available if the relation `products` is expanded. */
      products?: (components["schemas"]["Product"])[];
      /** @description The product types that belong to this tax rate. Available if the relation `product_types` is expanded. */
      product_types?: (components["schemas"]["ProductType"])[];
      /** @description The shipping options that belong to this tax rate. Available if the relation `shipping_options` is expanded. */
      shipping_options?: (components["schemas"]["ShippingOption"])[];
      /**
       * @description The count of products 
       * @example 10
       */
      product_count?: number;
      /**
       * @description The count of product types 
       * @example 2
       */
      product_type_count?: number;
      /**
       * @description The count of shipping options 
       * @example 1
       */
      shipping_option_count?: number;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Tracking Link 
     * @description Tracking Link holds information about tracking numbers for a Fulfillment. Tracking Links can optionally contain a URL that can be visited to see the status of the shipment.
     */
    TrackingLink: {
      /**
       * @description The tracking link's ID 
       * @example tlink_01G8ZH853Y6TFXWPG5EYE81X63
       */
      id: string;
      /**
       * Format: uri 
       * @description The URL at which the status of the shipment can be tracked.
       */
      url: string | null;
      /**
       * Format: RH370168054CN 
       * @description The tracking number given by the shipping carrier.
       */
      tracking_number: string;
      /**
       * @description The id of the Fulfillment that the Tracking Link references. 
       * @example ful_01G8ZRTMQCA76TXNAT81KPJZRF
       */
      fulfillment_id: string;
      /** @description Available if the relation `fulfillment` is expanded. */
      fulfillment?: components["schemas"]["Fulfillment"];
      /** @description Randomly generated key used to continue the completion of a process in case of failure. */
      idempotency_key: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
    /**
     * Update Stock Location Input 
     * @description Represents the Input to update a Stock Location
     */
    UpdateStockLocationInput: {
      /** @description The stock location name */
      name?: string;
      /** @description The Stock location address ID */
      address_id?: string;
      /** @description Stock location address object */
      address?: components["schemas"]["StockLocationAddressInput"] & Record<string, never>;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata?: Record<string, never>;
    };
    /**
     * User 
     * @description Represents a User who can manage store settings.
     */
    User: {
      /**
       * @description The user's ID 
       * @example usr_01G1G5V26F5TB3GPAPNJ8X1S3V
       */
      id: string;
      /**
       * @description The user's role 
       * @default member 
       * @enum {string}
       */
      role: "admin" | "member" | "developer";
      /**
       * Format: email 
       * @description The email of the User
       */
      email: string;
      /**
       * @description The first name of the User 
       * @example Levi
       */
      first_name: string | null;
      /**
       * @description The last name of the User 
       * @example Bogan
       */
      last_name: string | null;
      /**
       * @description An API token associated with the user. 
       * @example null
       */
      api_token: string | null;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was created.
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was updated.
       */
      updated_at: string;
      /**
       * Format: date-time 
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at: string | null;
      /**
       * @description An optional key-value map with additional details 
       * @example {
       *   "car": "white"
       * }
       */
      metadata: Record<string, unknown> | null;
    };
  };
  responses: {
    /** @description Default Error */
    default_error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Invalid State Error */
    invalid_state_error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Invalid Request Error */
    invalid_request_error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Not Found Error */
    not_found_error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Client Error or Multiple Errors */
    "400_error": {
      content: {
        "application/json": components["schemas"]["Error"] | components["schemas"]["MultipleErrors"];
      };
    };
    /** @description Server Error */
    "500_error": {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description User is not authorized. Must log in first */
    unauthorized: {
      content: {
        "text/plain": string;
      };
    };
    /** @description User does not exist or incorrect credentials */
    incorrect_credentials: {
      content: {
        "text/plain": string;
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Current Customer 
   * @description Gets the currently logged in Customer.
   */
  GetAuth: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreAuthRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Customer Login 
   * @description Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser.
   */
  PostAuth: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostAuthReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreAuthRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["incorrect_credentials"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Customer Log out 
   * @description Destroys a Customer's authenticated session.
   */
  DeleteAuth: {
    responses: {
      /** @description OK */
      200: never;
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Check if email exists 
   * @description Checks if a Customer with the given email has signed up.
   */
  GetAuthEmail: {
    parameters: {
      path: {
        /** @description The email to check if exists. */
        email: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreGetAuthEmailRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Create a Cart 
   * @description Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set.
   */
  PostCart: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartReq"];
      };
    };
    responses: {
      /** @description Successfully created a new Cart */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Cart 
   * @description Retrieves a Cart.
   */
  GetCartsCart: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Update a Cart 
   * @description Updates a Cart.
   */
  PostCartsCart: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Complete a Cart 
   * @description Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request.
   */
  PostCartsCartComplete: {
    parameters: {
      path: {
        /** @description The Cart id. */
        id: string;
      };
    };
    responses: {
      /** @description If a cart was successfully authorized, but requires further action from the user the response body will contain the cart with an updated payment session. If the Cart was successfully completed the response body will contain the newly created Order. */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCompleteCartRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Remove Discount 
   * @description Removes a Discount from a Cart.
   */
  DeleteCartsCartDiscountsDiscount: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The unique Discount code. */
        code: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Add a Line Item 
   * @description Generates a Line Item with a given Product Variant and adds it to the Cart
   */
  PostCartsCartLineItems: {
    parameters: {
      path: {
        /** @description The id of the Cart to add the Line Item to. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartLineItemsReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Update a Line Item 
   * @description Updates a Line Item if the desired quantity can be fulfilled.
   */
  PostCartsCartLineItemsItem: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The id of the Line Item. */
        line_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartLineItemsItemReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Delete a Line Item 
   * @description Removes a Line Item from a Cart.
   */
  DeleteCartsCartLineItemsItem: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The id of the Line Item. */
        line_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Select a Payment Session 
   * @description Selects a Payment Session as the session intended to be used towards the completion of the Cart.
   */
  PostCartsCartPaymentSession: {
    parameters: {
      path: {
        /** @description The ID of the Cart. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartPaymentSessionReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Create Payment Sessions 
   * @description Creates Payment Sessions for each of the available Payment Providers in the Cart's Region.
   */
  PostCartsCartPaymentSessions: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Update a Payment Session 
   * @description Updates a Payment Session with additional data.
   */
  PostCartsCartPaymentSessionUpdate: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The id of the payment provider. */
        provider_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartPaymentSessionUpdateReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Delete a Payment Session 
   * @description Deletes a Payment Session on a Cart. May be useful if a payment has failed.
   */
  DeleteCartsCartPaymentSessionsSession: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The id of the Payment Provider used to create the Payment Session to be deleted. */
        provider_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Refresh a Payment Session 
   * @description Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary.
   */
  PostCartsCartPaymentSessionsSession: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        id: string;
        /** @description The id of the Payment Provider that created the Payment Session to be refreshed. */
        provider_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Add a Shipping Method 
   * @description Adds a Shipping Method to the Cart.
   */
  PostCartsCartShippingMethod: {
    parameters: {
      path: {
        /** @description The cart ID. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCartsCartShippingMethodReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Calculate Cart Taxes 
   * @description Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service.
   */
  PostCartsCartTaxes: {
    parameters: {
      path: {
        /** @description The Cart ID. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Collections 
   * @description Retrieve a list of Product Collection.
   */
  GetCollections: {
    parameters: {
      query?: {
        /** @description The number of collections to skip before starting to collect the collections set */
        offset?: number;
        /** @description The number of collections to return */
        limit?: number;
        /** @description Filter by the collection handle */
        handle?: (string)[];
        /** @description Date comparison for when resulting collections were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting collections were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCollectionsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Collection 
   * @description Retrieves a Product Collection.
   */
  GetCollectionsCollection: {
    parameters: {
      path: {
        /** @description The id of the Product Collection */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCollectionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Create a Customer 
   * @description Creates a Customer account.
   */
  PostCustomers: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      /** @description A customer with the same email exists */
      422: {
        content: {
          "application/json": {
            /** @description The error code */
            code?: string;
            /** @description The type of error */
            type?: string;
            /** @description Human-readable message with details about the error */
            message?: string;
          };
        };
      };
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Customer 
   * @description Retrieves a Customer - the Customer must be logged in to retrieve their details.
   */
  GetCustomersCustomer: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Update Customer 
   * @description Updates a Customer's saved details.
   */
  PostCustomersCustomer: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Add a Shipping Address 
   * @description Adds a Shipping Address to a Customer's saved addresses.
   */
  PostCustomersCustomerAddresses: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerAddressesReq"];
      };
    };
    responses: {
      /** @description A successful response */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Update a Shipping Address 
   * @description Updates a Customer's saved Shipping Address.
   */
  PostCustomersCustomerAddressesAddress: {
    parameters: {
      path: {
        /** @description The id of the Address to update. */
        address_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerAddressesAddressReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Delete an Address 
   * @description Removes an Address from the Customer's saved addresses.
   */
  DeleteCustomersCustomerAddressesAddress: {
    parameters: {
      path: {
        /** @description The id of the Address to remove. */
        address_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Orders 
   * @description Retrieves a list of a Customer's Orders.
   */
  GetCustomersCustomerOrders: {
    parameters: {
      query?: {
        /** @description Query used for searching orders. */
        q?: string;
        /** @description Id of the order to search for. */
        id?: string;
        /** @description Status to search for. */
        status?: (string)[];
        /** @description Fulfillment status to search for. */
        fulfillment_status?: (string)[];
        /** @description Payment status to search for. */
        payment_status?: (string)[];
        /** @description Display id to search for. */
        display_id?: string;
        /** @description to search for. */
        cart_id?: string;
        /** @description to search for. */
        email?: string;
        /** @description to search for. */
        region_id?: string;
        /** @description The 3 character ISO currency code to set prices based on. */
        currency_code?: string;
        /** @description to search for. */
        tax_rate?: string;
        /** @description Date comparison for when resulting collections were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting collections were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting collections were canceled. */
        canceled_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description How many orders to return. */
        limit?: number;
        /** @description The offset in the resulting orders. */
        offset?: number;
        /** @description (Comma separated string) Which fields should be included in the resulting orders. */
        fields?: string;
        /** @description (Comma separated string) Which relations should be expanded in the resulting orders. */
        expand?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersListOrdersRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get Payment Methods 
   * @description Retrieves a list of a Customer's saved payment methods. Payment methods are saved with Payment Providers and it is their responsibility to fetch saved methods.
   */
  GetCustomersCustomerPaymentMethods: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersListPaymentMethodsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Reset Password 
   * @description Resets a Customer's password using a password token created by a previous /password-token request.
   */
  PostCustomersResetPassword: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersResetPasswordReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCustomersResetPasswordRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Request Password Reset 
   * @description Creates a reset password token to be used in a subsequent /reset-password request. The password token should be sent out of band e.g. via email and will not be returned.
   */
  PostCustomersCustomerPasswordToken: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerPasswordTokenReq"];
      };
    };
    responses: {
      /** @description OK */
      204: never;
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get Gift Card by Code 
   * @description Retrieves a Gift Card by its associated unique code.
   */
  GetGiftCardsCode: {
    parameters: {
      path: {
        /** @description The unique Gift Card code. */
        code: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreGiftCardsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Retrieve an OrderEdit 
   * @description Retrieves a OrderEdit.
   */
  GetOrderEditsOrderEdit: {
    parameters: {
      path: {
        /** @description The ID of the OrderEdit. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrderEditsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Completes an OrderEdit 
   * @description Completes an OrderEdit.
   */
  PostOrderEditsOrderEditComplete: {
    parameters: {
      path: {
        /** @description The ID of the Order Edit. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrderEditsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Decline an OrderEdit 
   * @description Declines an OrderEdit.
   */
  PostOrderEditsOrderEditDecline: {
    parameters: {
      path: {
        /** @description The ID of the OrderEdit. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostOrderEditsOrderEditDecline"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrderEditsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Look Up an Order 
   * @description Look up an order using filters.
   */
  GetOrders: {
    parameters: {
      query: {
        /** @description The display id given to the Order. */
        display_id: number;
        /** @description (Comma separated) Which fields should be included in the result. */
        fields?: string;
        /** @description (Comma separated) Which fields should be expanded in the result. */
        expand?: string;
        /** @description The email associated with this order. */
        email: string;
        /** @description The shipping address associated with this order. */
        shipping_address?: {
          /** @description The postal code of the shipping address */
          postal_code?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrdersRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Claim an Order 
   * @description Sends an email to emails registered to orders provided with link to transfer order ownership
   */
  PostOrdersCustomerOrderClaim: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerOrderClaimReq"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get by Cart ID 
   * @description Retrieves an Order by the id of the Cart that was used to create the Order.
   */
  GetOrdersOrderCartId: {
    parameters: {
      path: {
        /** @description The ID of Cart. */
        cart_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrdersRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Verify an Order Claim 
   * @description Verifies the claim order token provided to the customer upon request of order ownership
   */
  PostOrdersCustomerOrderClaimsCustomerOrderClaimAccept: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostCustomersCustomerAcceptClaimReq"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get an Order 
   * @description Retrieves an Order
   */
  GetOrdersOrder: {
    parameters: {
      query?: {
        /** @description (Comma separated) Which fields should be included in the result. */
        fields?: string;
        /** @description (Comma separated) Which fields should be expanded in the result. */
        expand?: string;
      };
      path: {
        /** @description The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreOrdersRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a PaymentCollection 
   * @description Get a Payment Collection
   */
  GetPaymentCollectionsPaymentCollection: {
    parameters: {
      query?: {
        /** @description Comma separated list of relations to include in the results. */
        expand?: string;
        /** @description Comma separated list of fields to include in the results. */
        fields?: string;
      };
      path: {
        /** @description The ID of the PaymentCollection. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Manage a Payment Session 
   * @description Manages Payment Sessions from Payment Collections.
   */
  PostPaymentCollectionsSessions: {
    parameters: {
      path: {
        /** @description The ID of the Payment Collection. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePaymentCollectionSessionsReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Manage Payment Sessions 
   * @description Manages Multiple Payment Sessions from Payment Collections.
   */
  PostPaymentCollectionsPaymentCollectionSessionsBatch: {
    parameters: {
      path: {
        /** @description The ID of the Payment Collections. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostPaymentCollectionsBatchSessionsReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Authorize PaymentSessions 
   * @description Authorizes Payment Sessions of a Payment Collection.
   */
  PostPaymentCollectionsSessionsBatchAuthorize: {
    parameters: {
      path: {
        /** @description The ID of the Payment Collections. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostPaymentCollectionsBatchSessionsAuthorizeReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Refresh a Payment Session 
   * @description Refreshes a Payment Session to ensure that it is in sync with the Payment Collection.
   */
  PostPaymentCollectionsPaymentCollectionPaymentSessionsSession: {
    parameters: {
      path: {
        /** @description The id of the PaymentCollection. */
        id: string;
        /** @description The id of the Payment Session to be refreshed. */
        session_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsSessionRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Authorize Payment Session 
   * @description Authorizes a Payment Session of a Payment Collection.
   */
  PostPaymentCollectionsSessionsSessionAuthorize: {
    parameters: {
      path: {
        /** @description The ID of the Payment Collections. */
        id: string;
        /** @description The ID of the Payment Session. */
        session_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePaymentCollectionsSessionRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Product Categories 
   * @description Retrieve a list of product categories.
   */
  GetProductCategories: {
    parameters: {
      query?: {
        /** @description Query used for searching product category names or handles. */
        q?: string;
        /** @description Query used for searching product category by handle. */
        handle?: string;
        /** @description Returns categories scoped by parent */
        parent_category_id?: string;
        /** @description Include all nested descendants of category */
        include_descendants_tree?: boolean;
        /** @description How many product categories to skip in the result. */
        offset?: number;
        /** @description Limit the number of product categories returned. */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreGetProductCategoriesRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Product Category 
   * @description Retrieves a Product Category.
   */
  GetProductCategoriesCategory: {
    parameters: {
      query?: {
        /** @description (Comma separated) Which fields should be expanded in each product category. */
        expand?: string;
        /** @description (Comma separated) Which fields should be retrieved in each product category. */
        fields?: string;
      };
      path: {
        /** @description The ID of the Product Category */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreGetProductCategoriesCategoryRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Product Tags 
   * @description Retrieve a list of Product Tags.
   */
  GetProductTags: {
    parameters: {
      query?: {
        /** @description The number of types to return. */
        limit?: number;
        /** @description The number of items to skip before the results. */
        offset?: number;
        /** @description The field to sort items by. */
        order?: string;
        /** @description The discount condition id on which to filter the product tags. */
        discount_condition_id?: string;
        /** @description The tag values to search for */
        value?: (string)[];
        /** @description The tag IDs to search for */
        id?: (string)[];
        /** @description A query string to search values for */
        q?: string;
        /** @description Date comparison for when resulting product tags were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting product tags were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreProductTagsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Product Types 
   * @description Retrieve a list of Product Types.
   */
  GetProductTypes: {
    parameters: {
      query?: {
        /** @description The number of types to return. */
        limit?: number;
        /** @description The number of items to skip before the results. */
        offset?: number;
        /** @description The field to sort items by. */
        order?: string;
        /** @description The discount condition id on which to filter the product types. */
        discount_condition_id?: string;
        /** @description The type values to search for */
        value?: (string)[];
        /** @description The type IDs to search for */
        id?: (string)[];
        /** @description A query string to search values for */
        q?: string;
        /** @description Date comparison for when resulting product types were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting product types were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreProductTypesListRes"];
        };
      };
      400: components["responses"]["400_error"];
      401: components["responses"]["unauthorized"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Products 
   * @description Retrieves a list of Products.
   */
  GetProducts: {
    parameters: {
      query?: {
        /** @description Query used for searching products by title, description, variant's title, variant's sku, and collection's title */
        q?: string;
        /** @description product IDs to search for. */
        id?: string | (string)[];
        /** @description an array of sales channel IDs to filter the retrieved products by. */
        sales_channel_id?: (string)[];
        /** @description Collection IDs to search for */
        collection_id?: (string)[];
        /** @description Type IDs to search for */
        type_id?: (string)[];
        /** @description Tag IDs to search for */
        tags?: (string)[];
        /** @description title to search for. */
        title?: string;
        /** @description description to search for. */
        description?: string;
        /** @description handle to search for. */
        handle?: string;
        /** @description Search for giftcards using is_giftcard=true. */
        is_giftcard?: boolean;
        /** @description Date comparison for when resulting products were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting products were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Category ids to filter by. */
        category_id?: (string)[];
        /** @description Include category children when filtering by category_id. */
        include_category_children?: boolean;
        /** @description How many products to skip in the result. */
        offset?: number;
        /** @description Limit the number of products returned. */
        limit?: number;
        /** @description (Comma separated) Which fields should be expanded in each product of the result. */
        expand?: string;
        /** @description (Comma separated) Which fields should be included in each product of the result. */
        fields?: string;
        /** @description the field used to order the products. */
        order?: string;
        /** @description The id of the Cart to set prices based on. */
        cart_id?: string;
        /** @description The id of the Region to set prices based on. */
        region_id?: string;
        /** @description The currency code to use for price selection. */
        currency_code?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreProductsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Search Products 
   * @description Run a search query on products using the search engine installed on Medusa
   */
  PostProductsSearch: {
    parameters: {
      query: {
        /** @description The query to run the search with. */
        q: string;
        /** @description How many products to skip in the result. */
        offset?: number;
        /** @description Limit the number of products returned. */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorePostSearchRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Product 
   * @description Retrieves a Product.
   */
  GetProductsProduct: {
    parameters: {
      query?: {
        /** @description The sales channel used when fetching the product. */
        sales_channel_id?: string;
        /** @description The ID of the customer's cart. */
        cart_id?: string;
        /** @description The ID of the region the customer is using. This is helpful to ensure correct prices are retrieved for a region. */
        region_id?: string;
        /** @description (Comma separated) Which fields should be included in the result. */
        fields?: string;
        /** @description (Comma separated) Which fields should be expanded in each product of the result. */
        expand?: string;
        /** @description The 3 character ISO currency code to set prices based on. This is helpful to ensure correct prices are retrieved for a currency. */
        currency_code?: string;
      };
      path: {
        /** @description The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreProductsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Regions 
   * @description Retrieves a list of Regions.
   */
  GetRegions: {
    parameters: {
      query?: {
        /** @description How many regions to skip in the result. */
        offset?: number;
        /** @description Limit the number of regions returned. */
        limit?: number;
        /** @description Date comparison for when resulting regions were created. */
        created_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
        /** @description Date comparison for when resulting regions were updated. */
        updated_at?: {
          /**
           * Format: date 
           * @description filter by dates less than this date
           */
          lt?: string;
          /**
           * Format: date 
           * @description filter by dates greater than this date
           */
          gt?: string;
          /**
           * Format: date 
           * @description filter by dates less than or equal to this date
           */
          lte?: string;
          /**
           * Format: date 
           * @description filter by dates greater than or equal to this date
           */
          gte?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreRegionsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Region 
   * @description Retrieves a Region.
   */
  GetRegionsRegion: {
    parameters: {
      path: {
        /** @description The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreRegionsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List Return Reasons 
   * @description Retrieves a list of Return Reasons.
   */
  GetReturnReasons: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreReturnReasonsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Return Reason 
   * @description Retrieves a Return Reason.
   */
  GetReturnReasonsReason: {
    parameters: {
      path: {
        /** @description The id of the Return Reason. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreReturnReasonsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Create Return 
   * @description Creates a Return for an Order.
   */
  PostReturns: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostReturnsReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreReturnsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get Shipping Options 
   * @description Retrieves a list of Shipping Options.
   */
  GetShippingOptions: {
    parameters: {
      query?: {
        /** @description Whether return Shipping Options should be included. By default all Shipping Options are returned. */
        is_return?: boolean;
        /** @description A comma separated list of Product ids to filter Shipping Options by. */
        product_ids?: string;
        /** @description the Region to retrieve Shipping Options from. */
        region_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreShippingOptionsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * List for Cart 
   * @description Retrieves a list of Shipping Options available to a cart.
   */
  GetShippingOptionsCartId: {
    parameters: {
      path: {
        /** @description The id of the Cart. */
        cart_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreCartShippingOptionsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Create a Swap 
   * @description Creates a Swap on an Order by providing some items to return along with some items to send back
   */
  PostSwaps: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorePostSwapsReq"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreSwapsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get by Cart ID 
   * @description Retrieves a Swap by the id of the Cart used to confirm the Swap.
   */
  GetSwapsSwapCartId: {
    parameters: {
      path: {
        /** @description The id of the Cart */
        cart_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreSwapsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get Product Variants 
   * @description Retrieves a list of Product Variants
   */
  GetVariants: {
    parameters: {
      query?: {
        /** @description A comma separated list of Product Variant ids to filter by. */
        ids?: string;
        /** @description A sales channel id for result configuration. */
        sales_channel_id?: string;
        /** @description A comma separated list of Product Variant relations to load. */
        expand?: string;
        /** @description How many product variants to skip in the result. */
        offset?: number;
        /** @description Maximum number of Product Variants to return. */
        limit?: number;
        /** @description The id of the Cart to set prices based on. */
        cart_id?: string;
        /** @description The id of the Region to set prices based on. */
        region_id?: string;
        /** @description The currency code to use for price selection. */
        currency_code?: string;
        /** @description product variant title to search for. */
        title?: string | (string)[];
        /** @description Filter by available inventory quantity */
        inventory_quantity?: OneOf<[number, {
          /** @description filter by inventory quantity less than this number */
          lt?: number;
          /** @description filter by inventory quantity greater than this number */
          gt?: number;
          /** @description filter by inventory quantity less than or equal to this number */
          lte?: number;
          /** @description filter by inventory quantity greater than or equal to this number */
          gte?: number;
        }]>;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreVariantsListRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
  /**
   * Get a Product Variant 
   * @description Retrieves a Product Variant by id
   */
  GetVariantsVariant: {
    parameters: {
      query?: {
        /** @description The id of the Cart to set prices based on. */
        cart_id?: string;
        /** @description A sales channel id for result configuration. */
        sales_channel_id?: string;
        /** @description The id of the Region to set prices based on. */
        region_id?: string;
        /** @description The 3 character ISO currency code to set prices based on. */
        currency_code?: string;
      };
      path: {
        /** @description The id of the Product Variant. */
        variant_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StoreVariantsRes"];
        };
      };
      400: components["responses"]["400_error"];
      404: components["responses"]["not_found_error"];
      409: components["responses"]["invalid_state_error"];
      422: components["responses"]["invalid_request_error"];
      500: components["responses"]["500_error"];
    };
  };
}
